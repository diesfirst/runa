Create some new objects:
	A render-frame object:
		  RenderFrame is a container for per-frame data, including BufferPool objects,
		  synchronization primitives (semaphores, fences) and the swapchain RenderTarget.
		 
		  When creating a RenderTarget, we need to provide images that will be used as attachments
		  within a RenderPass. The RenderFrame is responsible for creating a RenderTarget using
		  RenderTarget::CreateFunc. A custom RenderTarget::CreateFunc can be provided if a different
		  render target is required.
		 
		  A RenderFrame cannot be destroyed individually since frames are managed by the RenderContext,
		  the whole context must be destroyed. This is because each RenderFrame holds Vulkan objects
		  such as the swapchain image.
The submit draw function can return the semaphore that will be signalled on its completion
That semaphore can be a member of the rendererer. Before the draw function, it can be set to a VK_NULL
Create a render pipeline object to store the render state
A render pipeline is a sequence of subpass objects
Beef up the CommandBuffer wrapper class. Should contain things like color bleck states, rasterization states, push constants
RenderPipeline objects will store Subpass objects, which will represent stages of the renderpass.
RenderContext will store the RenderFrame objects, which each will Hold a Render Target, which each will hold a set of images, image views, and image attachments, typically for each swapchain image (which could be a set of size 1, but could also have an image for depth). 
The RenderFrame will store the syncronization primitives for that RenderTarget. 
The RenderContext will take a Device and a Surface as input. It will create the swapchain and own it. It can also be passed a swapchain on creation. (RenderContext == Renderer?)
The RenderPipeline object will be passed a commandbuffer from the RenderContext for it to record its renderpasses into
The Objects that actually do the drawing will be the Subpass Objects. They can be passed elements of the scene on creation, like meshes, as well as shader sources. They will be owned by the RenderPipeline. 
The draw command, like all other vulkan commands, will be performed by a function contained the the beefed up CommandBuffer object, after it is passed to a function in the Subpass.
So the subpasses' draw functions will actually call the commandbuffer's draw function, giving their relevant state data to it.
The RenderFrame object will also hold the buffers for things like UBO's. so we will have per-frame UBO's like we do now, or at least the buffers that hold the UBO data on the GPU end.
The RenderFrame object will hold a descriptor pool from which descriptor sets will be allocated. Will store the sets in a dictionary, so we could switch them out. 
The will be a Pipeline object. This will hold a pipeline layout which describes the descriptor sets we will be binding before the draw calls.

A descriptor is like a hardware view of an object. Usually is an address and some description of what the object is / how it should be accessed - from Nicolas Guillemot talk

Interesting idea for multithreading command buffer generation:
	The recommendation from Nvidia is to create 3 command pools per thread, round robin between them each frame. Each frame you can clear a whole pool of old command buffers in a single operation and allocate the new frame's command buffers from scratch very cheaply. Creating the pool is what's expensive. Carving the pool into buffers is cheap.

Also, look into the VK_EXT_conditional_rendering extention. https://www.saschawillems.de/blog/2018/09/05/vulkan-conditional-rendering/

Good recommendations page https://developer.samsung.com/game/usage

Have brush change size by rotating it around a point. Clock wise rotations = bigger, counter clock wise = smaller



+ Wed Feb 26 11:12:25 EST 2020
want to make it so that we can call commands up the state stack
we will impose some limitations on the stack in accordance with this change
1)  Each state can have ONLY ONE CHILD on the stack at any given time. 
    The thought here is to prevent having a logical tree represented as a stack.
    Right now, only one state is at the forefront of the stack. We allow it to "reload" itself
    by pushing itself onto the stack. So it must have some idea of what is on the top of the stack when
    it is in the event handling function. Having ancestors push new states onto the stack via trickle 
    events would break this technique, and likely lead to general chaos.
    
    The way to implement this is give each state that owns other states an "active child"
    member. When this is not null, we mush disable all the Options on that state that would lead to
    states getting pushed. One way to do this would be to classify Options by whether or not they can 
    push states. Options are currently represented as enums. Might create map? Or just a vector of 
    all the options that lead to states being pushed. 

2)  No more states popping themselves. Infacticide is the way to go. Parents will pop their active children.
    The reason being that this will allow parents to collect information from their child before deactivating it. 
    For instance, gathering reports. Reports and other important information can then domino down the 
    stack as the user aborts out of them. The abortion will be handled by a special Abort event. Either Esc
    or 'q' would be appropriate. (The trick would be getting readline to act immediately when Esc is entered). 
    All Modes of states will be responsible for handling Abort events. 
    If the Mode is null, it will check if the active child is nullptr. If its not, then it must add a pop to the state edits
    and set its active child to nullptr after doing any report collecting. Also it handles the event.
    If the child is nullptr, it does nothing (allows the event to pass through it).
    If the Mode is not null, then it is likely in some pending action stage and must gracefully get out of it.
    
Sidenote:
    I am thinking about replacing the stateEdit stack with a single pointer parameter. I don't think I could have multiple
    stateEdits with one event anymore. I can't go back to a return value though, because we still need to have a Do Nothing
    value. A return value would have to interpet a nullptr either as Do Nothing OR Pop the state. Actually, this is the reason
    for a container. An empty container is the Do Nothing option. Perhaps I can create a class (an edit Capsule) to serve this purpose
    better since its looking like the stack will always be size 1 at most.
  
+   Thu Feb 27 14:05:59 EST 2020
    Considering scrapping infanticed for god killing. This change would mean that only the root layer (Director) can
    pop the state stack. The advantage being that I can put more layers under the domain of the director, but still
    push them ontop of intermediate layers. So have director -> rendermanager -> scene description like hierarchies. 
    Or director -> rendermanager -> paint. It does not make sense to have the render manager have ownership over a 
    paint layer (state, but leaning towards renaming these guys to layers or modules). 
    Other states can still push, however. I would still want the shadermanager to be owned by the renderermanager, for instance.
    Layers other than the director will just not handle abort unless they are in a non-null state. In which case their duty
    is simply to move back to null and reset their vocab. 
    This does break the design choice I literally decided on yesterday. But the refresh command has solved some of the
    reasons for that choice (states no longer need to push and pop themselves to reset). It also means that if I    
    push a paint layer from director, I may want to push other states that it depends on. Or transfer stuff over.
    I'm thinking like binding the fragment input held by the paint layer to the renderer. Also, this means that
    the whole hiding of state-pushing options must be done in the onPush function, not the push itself.
    

Sat Mar 21 18:58:01 EDT 2020
    The way to do the inotify events is to allow the event to be modified
    by the event handlers. This way, we can have a shader update event that
    get handled by the pipeline manager but then turns the event into a 
    renderpassinstance update event (with the appropriate name)
    so it can be handled by the renderer manager.

Fri May  1 21:39:16 EDT 2020
    Having a function in the destructor of CmdPtr that can push to the very container it
    is in is likely causeing issues. What we can do instead is turn the report call back
    into a "success" function. Same thing from the callers perspective, but instead of
    Pool::request() taking the function argument we have Command::set() take it. Then
    we just making calling that function part of the success function that all the commands
    should already be calling. With any luck, we can just slip this into place...

Mon May  4 23:38:05 EDT 2020
    Got dependencies set up so for interactive shader writing. Need to fix some things,
    currently you can give shaders names independent of their file name when you compile 
    them, but the file watcher always takes the name from the file path.

Tue May  5 22:44:11 EDT 2020
    Currently shader file inclusions aren't happening. We should be able to rip the inlcuder from 
    the glslc source. Just will have to compile the source, get the dependencies right and check the license.
    Next, we can start looking back to getting the painting portion working. Well start
    by reimplementing the paint states of master in the new format. 
    Where to put the UBO date will be a question. 

Thu May  7 22:51:28 EDT 2020
    Recompiling different shaders with the same name is awesome... allows swapping out shaders at run time. 
    Need to fix the issue though where it keeps adding a new report each time.
