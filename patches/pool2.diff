diff --git a/src/core/types/pool.hpp b/src/core/types/pool.hpp
index 26123cf..758c7f4 100644
--- a/src/core/types/pool.hpp
+++ b/src/core/types/pool.hpp
@@ -6,55 +6,59 @@
 #include <functional>
 #include <vector>
 #include <iostream>
+#include <render/context.hpp>
+#include <render/command.hpp>
+#include <command/command.hpp>
+#include <type_traits>
 
 namespace sword
 {
 
 namespace state { class Report; }
+namespace render { class Context; }
 
-constexpr uint32_t POOL_DEFAULT_SIZE = 3;
-
-template <typename T, typename Base>
+template <typename T, typename Base, size_t Size = 3>
 class Pool
 {
+private:
+    std::vector<T> pool;
+    static constexpr size_t poolSize = Size;
+
 public:
-    template <typename P> using Pointer = std::unique_ptr<P, std::function<void(P*)>>;
+    //using Pointer = std::unique_ptr<Base, std::function<void(Base*)>>;
+    template<typename P> 
+    using Pointer = std::unique_ptr<P, std::function<void(P*)>>;
 
-    Pool(size_t size) : size{size}, pool(size) {}
-    Pool() : size{POOL_DEFAULT_SIZE}, pool(size) {}
+    Pool() :
+        pool(Size)
+    {}
 
-    template <typename... Args> Pointer<Base>
-    request(Args... args)
+    template <typename... Args> 
+    Pointer<Base> request(Args... args)
     {
         std::cout << "Called first pool" << '\n';
-        for (int i = 0; i < size; i++) 
+        for (int i = 0; i < poolSize; i++) 
             if (pool[i].isAvailable())
             {
                 pool[i].set(args...);
                 pool[i].activate();
-                Pointer<Base> ptr{&pool[i], [](Base* t)
-                    {
-                        t->reset();
-                    }};
+                Pointer<Base> ptr{&pool[i], [](Base* t){ t->reset(); }}; //may not have to construct here
                 return ptr; //tentatively may need to be std::move? copy should be ellided tho
             }    
         return nullptr;
     }
 
     template <typename... Args> 
-    Pointer<Base> request(std::function<void(state::Report*)> reportCb, Args... args)
+    Pointer<Base> request(std::function<void(state::Report*)> reportCb, Args... args) //requires IsCommand<T>
     {
         std::cout << "Called second pool request" << std::endl;
-        for (int i = 0; i < size; i++) 
+        for (int i = 0; i < poolSize; i++) 
             if (pool[i].isAvailable())
             {
                 pool[i].setSuccessFn(reportCb);
                 pool[i].set(args...);
                 pool[i].activate();
-                Pointer<Base> ptr{&pool[i], [](Base* t)
-                    {
-                        t->reset();
-                    }};
+                Pointer<Base> ptr{&pool[i], [](Base* t){ t->reset(); }};
                 return ptr; //tentatively may need to be std::move? copy should be ellided tho
             }    
         return nullptr;
@@ -66,16 +70,6 @@ public:
             i.print();
     }
 
-private:
-
-    template <typename... Args> void initialize(Args&&... args)
-    {
-        for (int i = 0; i < size; i++) 
-            pool.emplace_back(args...);   
-    }
-
-    const size_t size;
-    std::vector<T> pool;
 };
 
 
