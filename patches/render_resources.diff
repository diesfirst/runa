diff --git a/src/core/render/resource.cpp b/src/core/render/resource.cpp
index 5e8486a..d048fa5 100644
--- a/src/core/render/resource.cpp
+++ b/src/core/render/resource.cpp
@@ -1,7 +1,6 @@
 #include <cstring>
 #include <iostream>
 #include <render/resource.hpp>
-#include <render/types.hpp>
 
 namespace sword
 {
@@ -9,63 +8,54 @@ namespace sword
 namespace render
 {
 
-uint32_t findMemoryType(
-		vk::MemoryRequirements memReqs,  //returned by device.getBufferMemoryRequirements()
-		vk::MemoryPropertyFlags properties,
-        const vk::PhysicalDeviceMemoryProperties& memProps)
-{
-	for (uint32_t i = 0; i < memProps.memoryTypeCount; i++) 
-	{
-		if (
-			(memReqs.memoryTypeBits & (1 << i)) && 
-			(memProps.memoryTypes[i].propertyFlags & properties) == properties
-			) 
-		{
-		return i;
-	    }
-	}
-
-	throw std::runtime_error("Failed to find suitable memory");
-}
-
 Buffer::Buffer(
-        BufferResources br,
+        const vk::Device& device,
+        const vk::PhysicalDeviceProperties& props,
+		const vk::PhysicalDeviceMemoryProperties& memProps,
 		uint32_t size, 
 		vk::BufferUsageFlags usage,
-		vk::MemoryPropertyFlags typeFlags)
-         :
-	device{br.device},
-    devProps{br.physicalDeviceProperties},
-    memProps{br.memoryProperties},
-	size{size},
-    memoryTypeFlags{typeFlags}
+		vk::MemoryPropertyFlags typeFlags) :
+	device{device},
+    devProps{props},
+    memProps{memProps},
+	size{size}
 {
-	handle = device.createBuffer({{}, size, usage, vk::SharingMode::eExclusive, {}, {}});
-    allocateAndBindMemory();
-	std::cout << "Created buffer!" << '\n';
-	std::cout << "Buffer size: " << size << '\n';
-}
+	std::cout << "Creating buffer!" << std::endl;
+	std::cout << "MM Size: " << size << std::endl;
 
-Buffer::~Buffer()
-{
-    if (isMapped) 
-    {
-        device.unmapMemory(memory); 
-    }
-	device.destroyBuffer(handle);
-	device.freeMemory(memory);
-}
+	vk::BufferCreateInfo bufferInfo;
+	bufferInfo.setSize(size);
+	bufferInfo.setUsage(usage);
+	bufferInfo.setSharingMode(vk::SharingMode::eExclusive);
+
+	handle = device.createBuffer(bufferInfo);
 
-void Buffer::allocateAndBindMemory()
-{
 	auto memReqs = device.getBufferMemoryRequirements(handle);
+//	to do: fix this, its not working
+//	uint32_t memoryTypeIndex = findMemoryType(
+//			memReqs.memoryTypeBits, typeFlags); 
+//	std::cout << "Memory Type index: " << memoryTypeIndex << std::endl;
+//
+	vk::MemoryAllocateInfo allocInfo;
+	allocInfo.setMemoryTypeIndex(9); //always host visible for now
+	allocInfo.setAllocationSize(memReqs.size);
+//	allocInfo.setMemoryTypeIndex(memoryTypeIndex);
+	std::cout << "Mem reqs size:" << memReqs.size << std::endl;
+	std::cout << "Mem reqs alignment:" << memReqs.alignment << std::endl;
 
-    auto memoryTypeIndex = findMemoryType(memReqs, memoryTypeFlags, memProps);
+	memory = device.allocateMemory(allocInfo);
 
-	memory = device.allocateMemory({memReqs.size, memoryTypeIndex});
 	device.bindBufferMemory(handle, memory, 0);
 }
 
+
+Buffer::~Buffer()
+{
+	device.unmapMemory(memory);
+	device.destroyBuffer(handle);
+	device.freeMemory(memory);
+}
+
 vk::Buffer& Buffer::getHandle()
 {
 	return handle;
@@ -138,6 +128,24 @@ void Buffer::unmap()
 	isMapped = false;
 }
 
+uint32_t Buffer::findMemoryType(
+		uint32_t typeFilter, 
+		vk::MemoryPropertyFlags properties)
+{
+	for (uint32_t i = 0; i < memProps.memoryTypeCount; i++) 
+	{
+		if (
+			(typeFilter & (1 << i)) && 
+			(memProps.memoryTypes[i].propertyFlags & properties) == properties
+			) 
+		{
+		return i;
+	    }
+	}
+
+	throw std::runtime_error("Failed to find suitable memory");
+}
+
 Image::Image(
 		const vk::Device& device,
 		const vk::Extent3D extent,
@@ -151,8 +159,6 @@ Image::Image(
 	usageFlags{usageFlags}
 {
 	vk::ImageCreateInfo createInfo;
-    std::cerr << "Bout to print device:" << '\n';
-    std::cerr << device << '\n';
 	createInfo.setImageType(vk::ImageType::e2D);
 	createInfo.setExtent(extent);
 	createInfo.setMipLevels(1);
diff --git a/src/core/render/resource.hpp b/src/core/render/resource.hpp
index fe67f9c..fabed81 100644
--- a/src/core/render/resource.hpp
+++ b/src/core/render/resource.hpp
@@ -3,7 +3,6 @@
 
 #include <vulkan/vulkan.hpp>
 #include <vector>
-#include "types.hpp"
 
 namespace sword
 {
@@ -24,15 +23,17 @@ struct BufferBlock
     bool isValid{true};
 };
 
-class Buffer final
+class Buffer
 {
 friend class MemoryManager;
 public:
     Buffer(
-            BufferResources,
-            uint32_t size,
-            vk::BufferUsageFlags,
-            vk::MemoryPropertyFlags);
+	const vk::Device&,
+        const vk::PhysicalDeviceProperties&,
+	const vk::PhysicalDeviceMemoryProperties&,
+	uint32_t size,
+	vk::BufferUsageFlags,
+	vk::MemoryPropertyFlags);
     ~Buffer();
     Buffer(const Buffer&) = delete;
     Buffer& operator=(Buffer&) = delete;
@@ -52,15 +53,14 @@ private:
     const vk::PhysicalDeviceMemoryProperties& memProps;
     vk::DeviceMemory memory;
     vk::Buffer handle;
-    vk::MemoryPropertyFlags memoryTypeFlags;
     unsigned long size;
     bool isMapped{false};
     void* pHostMemory{nullptr};
     uint32_t curBlockOffset{0};
-    void allocateAndBindMemory();
+    uint32_t findMemoryType(uint32_t typeFilter, vk::MemoryPropertyFlags);
 };
 
-class Image final
+class Image
 {
 friend class MemoryManager;
 public:
@@ -104,6 +104,7 @@ private:
 };
 
 
+
 }; // namespace render
 
 }; // namespace sword
