diff --git a/src/core/render/command.cpp b/src/core/render/command.cpp
index 9ae8103..abe8296 100644
--- a/src/core/render/command.cpp
+++ b/src/core/render/command.cpp
@@ -12,8 +12,8 @@ CommandPool::CommandPool(
         const vk::Queue queue,
         uint32_t queueFamilyIndex, 
         vk::CommandPoolCreateFlags flags) :
-    device{device},
-    queue{queue}
+    device(device),
+    queue(queue)
 {
     std::cout << this << " CommandPool constructed" << std::endl;
     vk::CommandPoolCreateInfo info;
@@ -29,11 +29,11 @@ CommandPool::~CommandPool()
 }
 
 CommandPool::CommandPool(CommandPool&& other) :
-    device{other.device},
-    queue{other.queue},
-    handle{other.handle},
-    primaryCommandBuffers{std::move(other.primaryCommandBuffers)},
-    activePrimaryCommandBufferCount{other.activePrimaryCommandBufferCount}
+    device(other.device),
+    queue(other.queue),
+    handle(std::move(other.handle)),
+    primaryCommandBuffers(std::move(other.primaryCommandBuffers)),
+    activePrimaryCommandBufferCount(other.activePrimaryCommandBufferCount)
 {
     std::cout << this << " CommandPool move constructed" << std::endl;
     other.handle = nullptr;
@@ -41,15 +41,20 @@ CommandPool::CommandPool(CommandPool&& other) :
 
 CommandBuffer& CommandPool::requestCommandBuffer(vk::CommandBufferLevel level)
 {
-    assert(level == vk::CommandBufferLevel::ePrimary && "Only primary command buffers supported");
-    if (activePrimaryCommandBufferCount < primaryCommandBuffers.size())
+    if (level == vk::CommandBufferLevel::ePrimary)
+    {
+        if (activePrimaryCommandBufferCount < primaryCommandBuffers.size())
+        {
+            return *primaryCommandBuffers.at(activePrimaryCommandBufferCount++);
+        }
+        primaryCommandBuffers.emplace_back(std::make_unique<CommandBuffer>(*this, level));
+        activePrimaryCommandBufferCount++;
+        return *primaryCommandBuffers.back();
+    }
+    else
     {
-        return *primaryCommandBuffers.at(activePrimaryCommandBufferCount++);
+        throw std::runtime_error("No support for secondary command buffers yet");
     }
-    auto buffer = std::make_unique<CommandBuffer>(*this, level);
-    primaryCommandBuffers.push_back(std::move(buffer));
-    activePrimaryCommandBufferCount++;
-    return *primaryCommandBuffers.back();
 }
 
 void CommandPool::resetPool()
@@ -60,6 +65,7 @@ void CommandPool::resetPool()
 
 //level is primary by default
 CommandBuffer::CommandBuffer(CommandPool& pool, vk::CommandBufferLevel level) :
+    pool(pool),
     queue(pool.queue),
     device(pool.device)
 {
@@ -67,15 +73,15 @@ CommandBuffer::CommandBuffer(CommandPool& pool, vk::CommandBufferLevel level) :
     allocInfo.setCommandPool(pool.handle);
     allocInfo.setCommandBufferCount(1);
     allocInfo.setLevel(vk::CommandBufferLevel::ePrimary);
-    buffers = device.allocateCommandBuffers(allocInfo);
+    buffers = pool.device.allocateCommandBuffers(allocInfo);
     handle = buffers.at(0);
 
     vk::SemaphoreCreateInfo semaInfo;
-    signalSemaphore = device.createSemaphore(semaInfo);
+    signalSemaphore = pool.device.createSemaphore(semaInfo);
 
     vk::FenceCreateInfo fenceInfo;
     fenceInfo.setFlags(vk::FenceCreateFlagBits::eSignaled); //signalled in default state
-    fence = device.createFence(fenceInfo);
+    fence = pool.device.createFence(fenceInfo);
 }
 
 CommandBuffer::~CommandBuffer()
@@ -89,6 +95,7 @@ CommandBuffer::~CommandBuffer()
 }
 
 CommandBuffer::CommandBuffer(CommandBuffer&& other) :
+    pool{other.pool},
     device{other.device},
     queue{other.queue},
     buffers{std::move(other.buffers)},
diff --git a/src/core/render/command.hpp b/src/core/render/command.hpp
index a109572..1e7f876 100644
--- a/src/core/render/command.hpp
+++ b/src/core/render/command.hpp
@@ -20,7 +20,7 @@ public:
         const vk::Queue,
         uint32_t queueFamilyIndex, 
         vk::CommandPoolCreateFlags = {}); //empty flags by default
-    ~CommandPool();
+    virtual ~CommandPool();
     CommandPool(CommandPool&&);
     CommandPool(const CommandPool&) = delete;
     CommandPool& operator=(CommandPool&&) = delete;
@@ -31,10 +31,10 @@ public:
 
 private:
     const vk::Device& device;
-    const vk::Queue queue{nullptr};
-    vk::CommandPool handle{nullptr};
+    const vk::Queue queue;
+    vk::CommandPool handle;
     std::vector<std::unique_ptr<CommandBuffer>> primaryCommandBuffers;
-    uint32_t activePrimaryCommandBufferCount{0};
+    uint32_t activePrimaryCommandBufferCount;
 };
 
 class CommandBuffer
@@ -43,7 +43,7 @@ public:
     CommandBuffer(
         CommandPool& pool, 
         vk::CommandBufferLevel level = vk::CommandBufferLevel::ePrimary);
-    ~CommandBuffer();
+    virtual ~CommandBuffer();
     CommandBuffer(const CommandBuffer&) = delete;
     CommandBuffer& operator=(CommandBuffer&) = delete;
     CommandBuffer& operator=(CommandBuffer&&) = delete;
@@ -70,12 +70,13 @@ public:
     void waitForFence() const;
     void reset();
 private:
+    CommandPool& pool;
     const vk::Device& device;
-    const vk::Queue& queue{nullptr};
+    const vk::Queue& queue;
     std::vector<vk::CommandBuffer> buffers;
-    vk::CommandBuffer handle{nullptr};
-    vk::Semaphore signalSemaphore{nullptr};
-    vk::Fence fence{nullptr};
+    vk::CommandBuffer handle;
+    vk::Semaphore signalSemaphore;
+    vk::Fence fence;
     bool recordingComplete{false};
 };
 
