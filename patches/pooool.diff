diff --git a/src/core/types/pool.hpp b/src/core/types/pool.hpp
index 16b730b..8eea53b 100644
--- a/src/core/types/pool.hpp
+++ b/src/core/types/pool.hpp
@@ -6,44 +6,14 @@
 #include <functional>
 #include <vector>
 #include <iostream>
-#include <render/context.hpp>
 #include <render/command.hpp>
-#include <command/command.hpp>
-#include <type_traits>
 
 namespace sword
 {
 
-template <typename D, typename B>
-concept Derived = requires(D* d, B* b) {
-    b = static_cast<B*>(d);
-};
-
-template <typename T>
-concept Poolable = requires(T&& t) { 
-    t.reset();
-    t.activate();
-    t.isAvailable();
-};
-
-template <typename T>
-concept IsCommand = requires(T&& t) {
-    Poolable<T>;
-    t.execute();
-    t.setSuccessFn();
-};
-
-template <typename T>
-concept IsGpuCommand = requires(T&& t, render::CommandBuffer& buf) {
-    IsCommand<T>;
-    t.setCommandBuffer(buf);
-};
-
 namespace state { class Report; }
-namespace render { class Context; class CommandPool; }
 
 template <typename T, typename Base, size_t Size>
-requires Derived<T, Base> && Poolable<T> && (Size > 0)
 class Pool
 {
 private:
@@ -55,14 +25,15 @@ public:
     using Pointer = std::unique_ptr<Base, std::function<void(Base*)>>;
 
     Pool() {}
-    Pool(render::CommandPool&& gpuPool) requires IsGpuCommand<T>
+    Pool(render::CommandPool&& gpuPool) 
     {
-        gpuCommandPool = std::make_unique<render::CommandPool>(std::forward<render::CommandPool>(gpuPool));
+        std::cerr << "BAD POOL CTOR GETTING CALLED!!!!!!!!!!!!!!!!!!!!!!!" << '\n';
+        gpuCommandPool = std::make_unique<render::CommandPool>(std::move(gpuPool));
         {
             for (auto& element : pool) 
             {
-                auto& buffer = gpuCommandPool->requestCommandBuffer(vk::CommandBufferLevel::ePrimary);
-                //element.setCommandBuffer(buffer);
+                auto& buffer = gpuCommandPool->requestCommandBuffer(0, vk::CommandBufferLevel::ePrimary);
+                element.setCommandBuffer(buffer);
             }
         }
     }
