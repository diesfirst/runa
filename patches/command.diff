diff --git a/src/core/render/command.cpp b/src/core/render/command.cpp
index 9ae8103..e98310e 100644
--- a/src/core/render/command.cpp
+++ b/src/core/render/command.cpp
@@ -7,112 +7,115 @@ namespace sword
 namespace render
 {
 
+void waitOnCommandBuffer(CommandBuffer& buffer, const vk::Device& device)
+{
+    device.waitForFences(buffer.getFence(), true, UINT64_MAX);
+}
+
 CommandPool::CommandPool(
         const vk::Device& device, 
         const vk::Queue queue,
         uint32_t queueFamilyIndex, 
         vk::CommandPoolCreateFlags flags) :
-    device{device},
     queue{queue}
 {
+    static constexpr int poolsize = 5;
     std::cout << this << " CommandPool constructed" << std::endl;
     vk::CommandPoolCreateInfo info;
     info.setQueueFamilyIndex(queueFamilyIndex);
     info.setFlags(flags);
-    handle = device.createCommandPool(info);
-}
+    handle = device.createCommandPoolUnique(info);
 
-CommandPool::~CommandPool()
-{
-    if (handle)
-        device.destroyCommandPool(handle);
-}
+    primaryCommandBuffers.reserve(poolsize);
 
-CommandPool::CommandPool(CommandPool&& other) :
-    device{other.device},
-    queue{other.queue},
-    handle{other.handle},
-    primaryCommandBuffers{std::move(other.primaryCommandBuffers)},
-    activePrimaryCommandBufferCount{other.activePrimaryCommandBufferCount}
-{
-    std::cout << this << " CommandPool move constructed" << std::endl;
-    other.handle = nullptr;
+    vk::CommandBufferAllocateInfo allocInfo;
+    allocInfo.setCommandPool(*handle);
+    allocInfo.setCommandBufferCount(poolsize); //each pool will have 5 buffers 
+    allocInfo.setLevel(vk::CommandBufferLevel::ePrimary);
+    auto bufferHandles = device.allocateCommandBuffersUnique(allocInfo);
+
+    for (auto& handle : bufferHandles) 
+    {
+        primaryCommandBuffers.emplace_back(
+                std::make_unique<CommandBuffer>(std::move(handle), device, queue));
+    }
 }
 
+//CommandPool::CommandPool(CommandPool&& other) :
+//    device{other.device},
+//    queue{other.queue},
+//    handle{other.handle},
+//    primaryCommandBuffers{std::move(other.primaryCommandBuffers)},
+//    activePrimaryCommandBufferCount{other.activePrimaryCommandBufferCount}
+//{
+//    std::cout << this << " CommandPool move constructed" << std::endl;
+//    other.handle = nullptr;
+//}
+
 CommandBuffer& CommandPool::requestCommandBuffer(vk::CommandBufferLevel level)
 {
     assert(level == vk::CommandBufferLevel::ePrimary && "Only primary command buffers supported");
-    if (activePrimaryCommandBufferCount < primaryCommandBuffers.size())
-    {
-        return *primaryCommandBuffers.at(activePrimaryCommandBufferCount++);
-    }
-    auto buffer = std::make_unique<CommandBuffer>(*this, level);
-    primaryCommandBuffers.push_back(std::move(buffer));
-    activePrimaryCommandBufferCount++;
-    return *primaryCommandBuffers.back();
+    assert(activePrimaryCommandBufferCount < primaryCommandBuffers.size());
+    return *primaryCommandBuffers.at(activePrimaryCommandBufferCount++);
+//    if (activePrimaryCommandBufferCount < primaryCommandBuffers.size())
+//    {
+//        return *primaryCommandBuffers.at(activePrimaryCommandBufferCount++);
+//    }
+//    auto buffer = std::make_unique<CommandBuffer>(*this, level);
+//    primaryCommandBuffers.push_back(std::move(buffer));
+//    activePrimaryCommandBufferCount++;
+//    return *primaryCommandBuffers.back();
 }
 
 void CommandPool::resetPool()
 {
-    device.resetCommandPool(handle, {}); //do not release resources
+//    device.resetCommandPool(handle, {}); //do not release resources
+    handle.reset();
     activePrimaryCommandBufferCount = 0;
 }
 
 //level is primary by default
-CommandBuffer::CommandBuffer(CommandPool& pool, vk::CommandBufferLevel level) :
-    queue(pool.queue),
-    device(pool.device)
+CommandBuffer::CommandBuffer(
+        vk::UniqueCommandBuffer&& buffer, 
+        const vk::Device& device, 
+        const vk::Queue queue,
+        vk::CommandBufferLevel level) :
+    queue{queue},
+    handle{std::move(buffer)}
 {
-    vk::CommandBufferAllocateInfo allocInfo;
-    allocInfo.setCommandPool(pool.handle);
-    allocInfo.setCommandBufferCount(1);
-    allocInfo.setLevel(vk::CommandBufferLevel::ePrimary);
-    buffers = device.allocateCommandBuffers(allocInfo);
-    handle = buffers.at(0);
-
     vk::SemaphoreCreateInfo semaInfo;
-    signalSemaphore = device.createSemaphore(semaInfo);
+    signalSemaphore = device.createSemaphoreUnique(semaInfo);
 
     vk::FenceCreateInfo fenceInfo;
     fenceInfo.setFlags(vk::FenceCreateFlagBits::eSignaled); //signalled in default state
-    fence = device.createFence(fenceInfo);
-}
-
-CommandBuffer::~CommandBuffer()
-{
-    if (signalSemaphore)
-        device.destroySemaphore(signalSemaphore);
-    if (fence)
-        device.destroyFence(fence);
-//  if (handle)
-//      device.freeCommandBuffers(pool.handle, handle);
-}
-
-CommandBuffer::CommandBuffer(CommandBuffer&& other) :
-    device{other.device},
-    queue{other.queue},
-    buffers{std::move(other.buffers)},
-    handle{buffers.at(0)},
-    signalSemaphore{other.signalSemaphore},
-    fence{other.fence}
-{
-    other.fence = nullptr;
-    other.signalSemaphore = nullptr;
-    other.handle = nullptr;
-}
-
+    fence = device.createFenceUnique(fenceInfo);
+}
+
+//CommandBuffer::CommandBuffer(CommandBuffer&& other) :
+//    device{other.device},
+//    queue{other.queue},
+//    buffers{std::move(other.buffers)},
+//    handle{buffers.at(0)},
+//    signalSemaphore{other.signalSemaphore},
+//    fence{other.fence}
+//{
+//    other.fence = nullptr;
+//    other.signalSemaphore = nullptr;
+//    other.handle = nullptr;
+//}
+//
 void CommandBuffer::begin()
 {
     vk::CommandBufferBeginInfo beginInfo;
 //  beginInfo.setFlags(vk::CommandBufferUsageFlagBits::eSimultaneousUse);
 //  shoud not need this to resubmit 
-    handle.begin(beginInfo);
+    handle->begin(beginInfo);
     recordingComplete = false;
 }
 
 void CommandBuffer::beginRenderPass(vk::RenderPassBeginInfo& info)
 {
-    handle.beginRenderPass(&info, vk::SubpassContents::eInline);
+    handle->beginRenderPass(&info, vk::SubpassContents::eInline);
 }
 
 void CommandBuffer::bindDescriptorSets(
@@ -120,7 +123,7 @@ void CommandBuffer::bindDescriptorSets(
         const std::vector<vk::DescriptorSet>& sets, 
         const std::vector<uint32_t>& offsets)
 {
-    handle.bindDescriptorSets(
+    handle->bindDescriptorSets(
             vk::PipelineBindPoint::eGraphics,
             layout,
             0, //first set is 0
@@ -130,7 +133,7 @@ void CommandBuffer::bindDescriptorSets(
 
 void CommandBuffer::drawVerts(uint32_t vertCount, uint32_t firstVertex)
 {
-    handle.draw(vertCount, 1, firstVertex, 0);
+    handle->draw(vertCount, 1, firstVertex, 0);
 }
 
 void CommandBuffer::insertImageMemoryBarrier(
@@ -138,7 +141,7 @@ void CommandBuffer::insertImageMemoryBarrier(
             vk::PipelineStageFlags dstStageMask,
             vk::ImageMemoryBarrier imb)
 {
-    handle.pipelineBarrier(
+    handle->pipelineBarrier(
             srcStageMask, dstStageMask, 
             {},
             nullptr,
@@ -149,42 +152,44 @@ void CommandBuffer::insertImageMemoryBarrier(
 void CommandBuffer::copyImageToBuffer(
         vk::Image& image, vk::Buffer& buffer, vk::BufferImageCopy region)
 {
-    handle.copyImageToBuffer(
+    handle->copyImageToBuffer(
             image, vk::ImageLayout::eTransferSrcOptimal, buffer, region);
 }
 
 
 void CommandBuffer::endRenderPass()
 {
-    handle.endRenderPass();
+    handle->endRenderPass();
 }
 
 void CommandBuffer::end()
 {
-    handle.end();
+    handle->end();
     recordingComplete = true;
 }
 
-vk::Semaphore CommandBuffer::submit(vk::Semaphore& waitSemaphore, vk::PipelineStageFlags waitMask)
+vk::Semaphore CommandBuffer::submit(
+        vk::Semaphore& waitSemaphore, vk::PipelineStageFlags waitMask)
 {
     vk::SubmitInfo si;
-    si.setPCommandBuffers(&handle);
+    si.setPCommandBuffers(&handle.get());
     si.setPWaitSemaphores(&waitSemaphore);
-    si.setPSignalSemaphores(&signalSemaphore);
+    si.setPSignalSemaphores(&signalSemaphore.get());
     si.setCommandBufferCount(1);
     si.setWaitSemaphoreCount(1);
     si.setSignalSemaphoreCount(1);
     si.setPWaitDstStageMask(&waitMask);
 
-    device.resetFences(1, &fence);
-    queue.submit(si, fence);
-    return signalSemaphore;
+    //device.resetFences(1, &fence);
+    fence.reset();
+    queue.submit(si, fence.get());
+    return *signalSemaphore;
 }
 
 void CommandBuffer::submit()
 {
     vk::SubmitInfo si;
-    si.setPCommandBuffers(&handle);
+    si.setPCommandBuffers(&handle.get());
     si.setPWaitSemaphores(nullptr);
     si.setPSignalSemaphores(nullptr);
     si.setCommandBufferCount(1);
@@ -192,18 +197,20 @@ void CommandBuffer::submit()
     si.setSignalSemaphoreCount(0);
     si.setPWaitDstStageMask(nullptr);
 
-    device.resetFences(1, &fence);
-    queue.submit(si, fence);
+    fence.reset();
+    queue.submit(si, fence.get());
 }
 
+//should restructure this thing, the caller should have a function that waits 
+//on the command buffer
 void CommandBuffer::waitForFence() const
 {
-    device.waitForFences(1, &fence, true, UINT64_MAX);
+    fence.getOwner().waitForFences(fence.get(), true, UINT64_MAX);
 }
 
 void CommandBuffer::reset()
 {
-    handle.reset({});
+    handle.reset();
 }
 
 bool CommandBuffer::isRecorded() const
@@ -213,9 +220,13 @@ bool CommandBuffer::isRecorded() const
 
 void CommandBuffer::bindGraphicsPipeline(const vk::Pipeline& pipeline)
 {
-    handle.bindPipeline(vk::PipelineBindPoint::eGraphics, pipeline);
+    handle->bindPipeline(vk::PipelineBindPoint::eGraphics, pipeline);
 }
 
+const vk::Fence& CommandBuffer::getFence()
+{
+    return fence.get();
+}
 
 }; // namespace render
 
diff --git a/src/core/render/command.hpp b/src/core/render/command.hpp
index 4a0d249..d60e3f0 100644
--- a/src/core/render/command.hpp
+++ b/src/core/render/command.hpp
@@ -9,8 +9,11 @@ namespace sword
 namespace render
 {
 
+
 class CommandBuffer; //forward declaratiohn
 
+void waitOnCommandBuffer(CommandBuffer&, const vk::Device&);
+
 class CommandPool
 {
 friend class CommandBuffer;
@@ -20,19 +23,20 @@ public:
         const vk::Queue,
         uint32_t queueFamilyIndex, 
         vk::CommandPoolCreateFlags = {}); //empty flags by default
-    ~CommandPool();
-    CommandPool(CommandPool&&);
+    ~CommandPool() = default;
+    CommandPool(CommandPool&&) = default;
+
     CommandPool(const CommandPool&) = delete;
     CommandPool& operator=(CommandPool&&) = delete;
     CommandPool& operator=(const CommandPool&) = delete;
+
     CommandBuffer& requestCommandBuffer(
     vk::CommandBufferLevel = vk::CommandBufferLevel::ePrimary);
     void resetPool();
 
 private:
-    const vk::Device& device;
     const vk::Queue queue{nullptr};
-    vk::CommandPool handle{nullptr};
+    vk::UniqueCommandPool handle{nullptr};
     std::vector<std::unique_ptr<CommandBuffer>> primaryCommandBuffers;
     uint32_t activePrimaryCommandBufferCount{0};
 };
@@ -41,13 +45,16 @@ class CommandBuffer
 {
 public: 
     CommandBuffer(
-        CommandPool& pool, 
+        vk::UniqueCommandBuffer&& buffer,
+        const vk::Device& device,
+        const vk::Queue,
         vk::CommandBufferLevel level = vk::CommandBufferLevel::ePrimary);
-    ~CommandBuffer();
+    ~CommandBuffer() = default;
+    CommandBuffer(CommandBuffer&&) = default;
+
     CommandBuffer(const CommandBuffer&) = delete;
     CommandBuffer& operator=(CommandBuffer&) = delete;
     CommandBuffer& operator=(CommandBuffer&&) = delete;
-    CommandBuffer(CommandBuffer&&);
     
     void begin();
     void beginRenderPass(vk::RenderPassBeginInfo&);
@@ -68,14 +75,14 @@ public:
     void submit();
     bool isRecorded() const;
     void waitForFence() const;
+    const vk::Fence& getFence();
     void reset();
+
 private:
-    const vk::Device& device;
-    const vk::Queue& queue{nullptr};
-    std::vector<vk::CommandBuffer> buffers;
-    vk::CommandBuffer handle{nullptr};
-    vk::Semaphore signalSemaphore{nullptr};
-    vk::Fence fence{nullptr};
+    const vk::Queue queue{nullptr};
+    vk::UniqueCommandBuffer handle{nullptr};
+    vk::UniqueSemaphore signalSemaphore{nullptr};
+    vk::UniqueFence fence{nullptr};
     bool recordingComplete{false};
 };
 
diff --git a/src/core/render/renderer.cpp b/src/core/render/renderer.cpp
index a47b5bc..fc75376 100644
--- a/src/core/render/renderer.cpp
+++ b/src/core/render/renderer.cpp
@@ -506,7 +506,8 @@ void Renderer::render(uint32_t cmdId, bool updateUbo)
     if (updateUbo)
 	    updateFrameDescriptorBuffer(activeFrameIndex, 0);
 
-	renderBuffer.waitForFence();
+    waitOnCommandBuffer(renderBuffer, device);
+	//renderBuffer.waitForFence();
 	auto submissionCompleteSemaphore = renderBuffer.submit(
 			imageAcquiredSemaphore, 
 			vk::PipelineStageFlagBits::eColorAttachmentOutput);
diff --git a/src/core/tags b/src/core/tags
index 7db18ff..de54ce9 100644
--- a/src/core/tags
+++ b/src/core/tags
@@ -43,14 +43,12 @@ C_WIDTH	state/painter.hpp	/^constexpr uint32_t C_WIDTH = 1600;$/;"	m	namespace:s
 Callbacks	state/state.hpp	/^struct Callbacks$/;"	s	namespace:sword::state
 Category	event/event.hpp	/^enum class Category : uint8_t$/;"	c	namespace:sword::event::symbol
 Command	command/command.hpp	/^class Command$/;"	c	namespace:sword::command
-CommandBuffer	render/command.cpp	/^CommandBuffer::CommandBuffer(CommandBuffer&& other) :$/;"	f	class:sword::render::CommandBuffer
-CommandBuffer	render/command.cpp	/^CommandBuffer::CommandBuffer(CommandPool& pool, vk::CommandBufferLevel level) :$/;"	f	class:sword::render::CommandBuffer
+CommandBuffer	render/command.cpp	/^CommandBuffer::CommandBuffer($/;"	f	class:sword::render::CommandBuffer
 CommandBuffer	render/command.hpp	/^class CommandBuffer$/;"	c	namespace:sword::render
 CommandLine	event/event.hpp	/^    CommandLine,$/;"	m	class:sword::event::symbol::Category
 CommandLine	event/event.hpp	/^    CommandLine,$/;"	m	class:sword::event::symbol::InputMode
 CommandLine	event/event.hpp	/^class CommandLine: public Event$/;"	c	namespace:sword::event::symbol
 CommandPool	render/command.cpp	/^CommandPool::CommandPool($/;"	f	class:sword::render::CommandPool
-CommandPool	render/command.cpp	/^CommandPool::CommandPool(CommandPool&& other) :$/;"	f	class:sword::render::CommandPool
 CommandPool	render/command.hpp	/^class CommandPool$/;"	c	namespace:sword::render
 CommandPools	command/commandpools.hpp	/^struct CommandPools$/;"	s	namespace:sword
 CompileShader	command/shader.cpp	/^CompileShader::CompileShader()$/;"	f	class:sword::command::CompileShader
@@ -428,7 +426,6 @@ brushX	state/painter.hpp	/^    float brushX; \/\/mouseX in canvas space$/;"	m	st
 brushY	state/painter.hpp	/^    float brushY; \/\/mouseY in canvas space$/;"	m	struct:sword::state::painter::FragmentInput
 bufferBlock	render/renderframe.hpp	/^    BufferBlock* bufferBlock;$/;"	m	class:sword::render::RenderFrame
 bufferBlocks	render/resource.hpp	/^    std::vector<std::unique_ptr<BufferBlock>> bufferBlocks;$/;"	m	class:sword::render::final
-buffers	render/command.hpp	/^    std::vector<vk::CommandBuffer> buffers;$/;"	m	class:sword::render::CommandBuffer
 build	state/shader.hpp	/^    constexpr const char* build = SHADER_DIR;$/;"	m	namespace:sword::state::shader_dir
 button	event/event.hpp	/^    symbol::MouseButton button;$/;"	m	class:sword::event::symbol::MouseButton
 cMapX	state/painter.hpp	/^constexpr float cMapX = float(S_WIDTH) \/ float(C_WIDTH);$/;"	m	namespace:sword::state::painter
@@ -595,8 +592,6 @@ destroyDebugMessenger	render/context.cpp	/^void Context::destroyDebugMessenger()
 destroyImageViews	render/swapchain.cpp	/^void Swapchain::destroyImageViews()$/;"	f	class:sword::render::Swapchain
 devProps	render/resource.hpp	/^    const vk::PhysicalDeviceProperties& devProps;$/;"	m	class:sword::render::final
 device	render/attachment.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::Attachment
-device	render/command.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::CommandBuffer
-device	render/command.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::CommandPool
 device	render/context.hpp	/^    vk::UniqueDevice device;$/;"	m	class:sword::render::Context
 device	render/pipeline.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::GraphicsPipeline
 device	render/renderer.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::Renderer
@@ -738,6 +733,7 @@ getExtent	render/attachment.cpp	/^vk::Extent2D Attachment::getExtent() const$/;"
 getExtent2D	render/resource.cpp	/^const vk::Extent2D Image::getExtent2D() const $/;"	f	class:sword::render::Image
 getExtent2D	render/swapchain.cpp	/^vk::Extent2D Swapchain::getExtent2D()$/;"	f	class:sword::render::Swapchain
 getExtent3D	render/swapchain.cpp	/^vk::Extent3D Swapchain::getExtent3D()$/;"	f	class:sword::render::Swapchain
+getFence	render/command.cpp	/^const vk::Fence& CommandBuffer::getFence()$/;"	f	class:sword::render::CommandBuffer
 getFirst	event/event.hpp	/^    T getFirst() const$/;"	f	class:sword::event::symbol::CommandLine
 getFirstWord	event/event.hpp	/^    std::string getFirstWord() const $/;"	f	class:sword::event::symbol::CommandLine
 getFormat	render/attachment.cpp	/^vk::Format Attachment::getFormat() const$/;"	f	class:sword::render::Attachment
@@ -1500,7 +1496,7 @@ stateStack	application.hpp	/^    StateStack stateStack;$/;"	m	class:sword::Appli
 stateStack	state/director.hpp	/^    const StateStack& stateStack;$/;"	m	class:sword::state::final
 stop	event/filewatcher.cpp	/^void FileWatcher::stop()$/;"	f	class:sword::event::FileWatcher
 string_type	state/report.hpp	/^    constexpr std::string_view string_type() const$/;"	f	class:sword::state::final
-submit	render/command.cpp	/^vk::Semaphore CommandBuffer::submit(vk::Semaphore& waitSemaphore, vk::PipelineStageFlags waitMask)$/;"	f	class:sword::render::CommandBuffer
+submit	render/command.cpp	/^vk::Semaphore CommandBuffer::submit($/;"	f	class:sword::render::CommandBuffer
 submit	render/command.cpp	/^void CommandBuffer::submit()$/;"	f	class:sword::render::CommandBuffer
 subpassDependencies	render/renderpass.hpp	/^    std::vector<vk::SubpassDependency> subpassDependencies;$/;"	m	class:sword::render::RenderPass
 subpasses	render/renderpass.hpp	/^    std::vector<vk::SubpassDescription> subpasses;$/;"	m	class:sword::render::RenderPass
@@ -1676,6 +1672,7 @@ vocabPtr	command/vocab.hpp	/^    const state::Vocab* vocabPtr;$/;"	m	class:sword
 vocabPtrs	event/dispatcher.hpp	/^    inline static std::vector<const state::Vocab*> vocabPtrs;$/;"	m	class:sword::event::EventDispatcher
 waitForEvent	render/surface/window.cpp	/^xcb_generic_event_t* Window::waitForEvent() const$/;"	f	class:sword::render::Window
 waitForFence	render/command.cpp	/^void CommandBuffer::waitForFence() const$/;"	f	class:sword::render::CommandBuffer
+waitOnCommandBuffer	render/command.cpp	/^void waitOnCommandBuffer(CommandBuffer& buffer, const vk::Device& device)$/;"	f	namespace:sword::render
 watchFile	command/commandpools.hpp	/^    CommandPool<command::WatchFile> watchFile;$/;"	m	struct:sword::CommandPools
 watchFile	state/shader.hpp	/^    WatchFile watchFile;$/;"	m	class:sword::state::final
 watchFile	state/shader.hpp	/^    enum class Op : Option {watchFile, compileShader, printShader, loadFrag, loadVert, setSpecInt, setSpecFloat, printReports};$/;"	m	class:sword::state::final::Op
@@ -1698,8 +1695,6 @@ xform	state/painter.hpp	/^    glm::mat4& xform;$/;"	m	class:sword::state::painte
 xform	state/painter.hpp	/^    glm::mat4& xform;$/;"	m	class:sword::state::painter::Translate
 ~Attachment	render/attachment.cpp	/^Attachment::~Attachment()$/;"	f	class:sword::render::Attachment
 ~Buffer	render/resource.cpp	/^Buffer::~Buffer()$/;"	f	class:sword::render::Buffer
-~CommandBuffer	render/command.cpp	/^CommandBuffer::~CommandBuffer()$/;"	f	class:sword::render::CommandBuffer
-~CommandPool	render/command.cpp	/^CommandPool::~CommandPool()$/;"	f	class:sword::render::CommandPool
 ~Context	render/context.cpp	/^Context::~Context()$/;"	f	class:sword::render::Context
 ~EventDispatcher	event/dispatcher.cpp	/^EventDispatcher::~EventDispatcher()$/;"	f	class:sword::event::EventDispatcher
 ~GraphicsPipeline	render/pipeline.cpp	/^GraphicsPipeline::~GraphicsPipeline()$/;"	f	class:sword::render::GraphicsPipeline
diff --git a/tags b/tags
index f06f4b1..a0f7398 100644
--- a/tags
+++ b/tags
@@ -273,8 +273,7 @@ Command	src/programs/event_thread_test.cpp	/^class Command$/;"	c	file:
 Command	src/programs/paint_runtime.cpp	/^    Command,$/;"	m	class:PressAction::InputState	file:
 Command	src/programs/paint_runtime.cpp	/^struct Command$/;"	s	class:PressAction::ReleaseAction	file:
 CommandBuffer	include/thirdparty/vulkan/vulkan.hpp	/^  class CommandBuffer$/;"	c	namespace:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV::ExternalSemaphoreFeatureFlagBits::ExternalSemaphoreHandleTypeFlagBits::FenceCreateFlagBits::FenceImportFlagBits::FormatFeatureFlagBits::FramebufferCreateFlagBits::GeometryFlagBitsNV::GeometryInstanceFlagBitsNV::ImageAspectFlagBits::ImageCreateFlagBits::ImageUsageFlagBits::ImageViewCreateFlagBits::IndirectCommandsLayoutUsageFlagBitsNVX::MemoryAllocateFlagBits::MemoryHeapFlagBits::MemoryPropertyFlagBits::ObjectEntryUsageFlagBitsNVX::PeerMemoryFeatureFlagBits::PipelineCreateFlagBits::PipelineCreationFeedbackFlagBitsEXT::PipelineShaderStageCreateFlagBits::PipelineStageFlagBits::QueryControlFlagBits::QueryPipelineStatisticFlagBits::QueryResultFlagBits::QueueFlagBits::ResolveModeFlagBitsKHR::SampleCountFlagBits::SamplerCreateFlagBits::SemaphoreImportFlagBits::SemaphoreWaitFlagBitsKHR::ShaderStageFlagBits::SparseImageFormatFlagBits::SparseMemoryBindFlagBits::StencilFaceFlagBits::SubgroupFeatureFlagBits::SubpassDescriptionFlagBits::SurfaceCounterFlagBitsEXT::SurfaceTransformFlagBitsKHR::VULKAN_HPP_NAMESPACE
-CommandBuffer	src/core/render/command.cpp	/^CommandBuffer::CommandBuffer(CommandBuffer&& other) :$/;"	f	class:sword::render::CommandBuffer
-CommandBuffer	src/core/render/command.cpp	/^CommandBuffer::CommandBuffer(CommandPool& pool, vk::CommandBufferLevel level) :$/;"	f	class:sword::render::CommandBuffer
+CommandBuffer	src/core/render/command.cpp	/^CommandBuffer::CommandBuffer($/;"	f	class:sword::render::CommandBuffer
 CommandBuffer	src/core/render/command.hpp	/^class CommandBuffer$/;"	c	namespace:sword::render
 CommandBufferAllocateInfo	include/thirdparty/vulkan/vulkan.hpp	/^    struct CommandBufferAllocateInfo$/;"	s	namespace:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV::layout
 CommandBufferAllocateInfo	include/thirdparty/vulkan/vulkan.hpp	/^  struct CommandBufferAllocateInfo : public layout::CommandBufferAllocateInfo$/;"	s	class:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV
@@ -294,7 +293,6 @@ CommandLine	src/core/event/event.hpp	/^    CommandLine,$/;"	m	class:sword::event
 CommandLine	src/core/event/event.hpp	/^class CommandLine: public Event$/;"	c	namespace:sword::event::symbol
 CommandPool	include/thirdparty/vulkan/vulkan.hpp	/^  class CommandPool$/;"	c	namespace:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV::ExternalSemaphoreFeatureFlagBits::ExternalSemaphoreHandleTypeFlagBits::FenceCreateFlagBits::FenceImportFlagBits::FormatFeatureFlagBits::FramebufferCreateFlagBits::GeometryFlagBitsNV::GeometryInstanceFlagBitsNV::ImageAspectFlagBits::ImageCreateFlagBits::ImageUsageFlagBits::ImageViewCreateFlagBits::IndirectCommandsLayoutUsageFlagBitsNVX::MemoryAllocateFlagBits::MemoryHeapFlagBits::MemoryPropertyFlagBits::ObjectEntryUsageFlagBitsNVX::PeerMemoryFeatureFlagBits::PipelineCreateFlagBits::PipelineCreationFeedbackFlagBitsEXT::PipelineShaderStageCreateFlagBits::PipelineStageFlagBits::QueryControlFlagBits::QueryPipelineStatisticFlagBits::QueryResultFlagBits::QueueFlagBits::ResolveModeFlagBitsKHR::SampleCountFlagBits::SamplerCreateFlagBits::SemaphoreImportFlagBits::SemaphoreWaitFlagBitsKHR::ShaderStageFlagBits::SparseImageFormatFlagBits::SparseMemoryBindFlagBits::StencilFaceFlagBits::SubgroupFeatureFlagBits::SubpassDescriptionFlagBits::SurfaceCounterFlagBitsEXT::SurfaceTransformFlagBitsKHR::VULKAN_HPP_NAMESPACE
 CommandPool	src/core/render/command.cpp	/^CommandPool::CommandPool($/;"	f	class:sword::render::CommandPool
-CommandPool	src/core/render/command.cpp	/^CommandPool::CommandPool(CommandPool&& other) :$/;"	f	class:sword::render::CommandPool
 CommandPool	src/core/render/command.hpp	/^class CommandPool$/;"	c	namespace:sword::render
 CommandPoolCreateFlagBits	include/thirdparty/vulkan/vulkan.hpp	/^  enum class CommandPoolCreateFlagBits$/;"	c	class:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits
 CommandPoolCreateInfo	include/thirdparty/vulkan/vulkan.hpp	/^    struct CommandPoolCreateInfo$/;"	s	namespace:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::layout
@@ -7946,7 +7944,6 @@ bufferRowLength	include/thirdparty/vulkan/vulkan_core.h	/^    uint32_t
 buffer_	include/thirdparty/vulkan/vulkan.hpp	/^      : layout::BufferMemoryBarrier( srcAccessMask_, dstAccessMask_, srcQueueFamilyIndex_, dstQueueFamilyIndex_, buffer_, offset_, size_ )$/;"	m	struct:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV::ExternalSemaphoreFeatureFlagBits::ExternalSemaphoreHandleTypeFlagBits::FenceCreateFlagBits::FenceImportFlagBits::FormatFeatureFlagBits::FramebufferCreateFlagBits::GeometryFlagBitsNV::GeometryInstanceFlagBitsNV::ImageAspectFlagBits::BufferMemoryBarrier
 buffer_	include/thirdparty/vulkan/vulkan.hpp	/^      : layout::BufferViewCreateInfo( flags_, buffer_, format_, offset_, range_ )$/;"	m	struct:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV::ExternalSemaphoreFeatureFlagBits::ExternalSemaphoreHandleTypeFlagBits::FenceCreateFlagBits::FenceImportFlagBits::FormatFeatureFlagBits::FramebufferCreateFlagBits::BufferViewCreateInfo
 buffer_start	include/thirdparty/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon105
-buffers	src/core/render/command.hpp	/^    std::vector<vk::CommandBuffer> buffers;$/;"	m	class:sword::render::CommandBuffer
 buflen	include/thirdparty/stb_image.h	/^   int buflen;$/;"	m	struct:__anon105
 build	src/core/state/shader.hpp	/^    constexpr const char* build = SHADER_DIR;$/;"	m	namespace:sword::state::shader_dir
 button	src/core/event/event.hpp	/^    symbol::MouseButton button;$/;"	m	class:sword::event::symbol::MouseButton
@@ -8602,8 +8599,6 @@ destroyDebugMessenger	src/core/render/context.cpp	/^void Context::destroyDebugMe
 destroyImageViews	src/core/render/swapchain.cpp	/^void Swapchain::destroyImageViews()$/;"	f	class:sword::render::Swapchain
 devProps	src/core/render/resource.hpp	/^    const vk::PhysicalDeviceProperties& devProps;$/;"	m	class:sword::render::final
 device	src/core/render/attachment.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::Attachment
-device	src/core/render/command.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::CommandBuffer
-device	src/core/render/command.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::CommandPool
 device	src/core/render/context.hpp	/^    vk::UniqueDevice device;$/;"	m	class:sword::render::Context
 device	src/core/render/pipeline.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::GraphicsPipeline
 device	src/core/render/renderer.hpp	/^    const vk::Device& device;$/;"	m	class:sword::render::Renderer
@@ -11018,6 +11013,7 @@ getExtent	src/core/render/attachment.cpp	/^vk::Extent2D Attachment::getExtent()
 getExtent2D	src/core/render/resource.cpp	/^const vk::Extent2D Image::getExtent2D() const $/;"	f	class:sword::render::Image
 getExtent2D	src/core/render/swapchain.cpp	/^vk::Extent2D Swapchain::getExtent2D()$/;"	f	class:sword::render::Swapchain
 getExtent3D	src/core/render/swapchain.cpp	/^vk::Extent3D Swapchain::getExtent3D()$/;"	f	class:sword::render::Swapchain
+getFence	src/core/render/command.cpp	/^const vk::Fence& CommandBuffer::getFence()$/;"	f	class:sword::render::CommandBuffer
 getFirst	src/core/event/event.hpp	/^    T getFirst() const$/;"	f	class:sword::event::symbol::CommandLine
 getFirstWord	src/core/event/event.hpp	/^    std::string getFirstWord() const $/;"	f	class:sword::event::symbol::CommandLine
 getFormat	src/core/render/attachment.cpp	/^vk::Format Attachment::getFormat() const$/;"	f	class:sword::render::Attachment
@@ -16299,7 +16295,7 @@ subgroupSize	include/thirdparty/vulkan/vulkan_core.h	/^    uint32_t
 subgroupSizeControl	include/thirdparty/vulkan/vulkan_core.h	/^    VkBool32           subgroupSizeControl;$/;"	m	struct:VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
 subminor	include/thirdparty/vulkan/vulkan.hpp	/^    uint8_t subminor;$/;"	m	struct:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::ConformanceVersionKHR
 subminor	include/thirdparty/vulkan/vulkan_core.h	/^    uint8_t    subminor;$/;"	m	struct:VkConformanceVersionKHR
-submit	src/core/render/command.cpp	/^vk::Semaphore CommandBuffer::submit(vk::Semaphore& waitSemaphore, vk::PipelineStageFlags waitMask)$/;"	f	class:sword::render::CommandBuffer
+submit	src/core/render/command.cpp	/^vk::Semaphore CommandBuffer::submit($/;"	f	class:sword::render::CommandBuffer
 submit	src/core/render/command.cpp	/^void CommandBuffer::submit()$/;"	f	class:sword::render::CommandBuffer
 subpass	include/thirdparty/vulkan/vulkan.hpp	/^      uint32_t subpass;$/;"	m	struct:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::layout::CommandBufferInheritanceInfo
 subpass	include/thirdparty/vulkan/vulkan.hpp	/^      uint32_t subpass;$/;"	m	struct:layout::GraphicsPipelineCreateInfo
@@ -17161,6 +17157,7 @@ w2	include/thirdparty/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon110:
 w_lores	include/thirdparty/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon112
 waitForEvent	src/core/render/surface/window.cpp	/^xcb_generic_event_t* Window::waitForEvent() const$/;"	f	class:sword::render::Window
 waitForFence	src/core/render/command.cpp	/^void CommandBuffer::waitForFence() const$/;"	f	class:sword::render::CommandBuffer
+waitOnCommandBuffer	src/core/render/command.cpp	/^void waitOnCommandBuffer(CommandBuffer& buffer, const vk::Device& device)$/;"	f	namespace:sword::render
 waitSemaphoreCount	include/thirdparty/vulkan/vulkan.hpp	/^      uint32_t waitSemaphoreCount;$/;"	m	struct:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::SamplerYcbcrModelConversion::SamplerYcbcrRange::ScopeNV::SemaphoreTypeKHR::ShaderFloatControlsIndependenceKHR::ShaderInfoTypeAMD::ShadingRatePaletteEntryNV::SharingMode::StencilOp::StructureType::SubpassContents::SystemAllocationScope::TessellationDomainOrigin::TimeDomainEXT::ValidationCacheHeaderVersionEXT::ValidationCheckEXT::ValidationFeatureDisableEXT::ValidationFeatureEnableEXT::VendorId::VertexInputRate::ViewportCoordinateSwizzleNV::AccessFlagBits::AttachmentDescriptionFlagBits::BufferCreateFlagBits::BufferUsageFlagBits::BuildAccelerationStructureFlagBitsNV::ColorComponentFlagBits::CommandBufferResetFlagBits::CommandBufferUsageFlagBits::CommandPoolCreateFlagBits::CommandPoolResetFlagBits::CompositeAlphaFlagBitsKHR::ConditionalRenderingFlagBitsEXT::CullModeFlagBits::DebugReportFlagBitsEXT::DebugUtilsMessageSeverityFlagBitsEXT::DebugUtilsMessageTypeFlagBitsEXT::DependencyFlagBits::DescriptorBindingFlagBitsEXT::DescriptorPoolCreateFlagBits::DescriptorSetLayoutCreateFlagBits::DeviceGroupPresentModeFlagBitsKHR::DeviceQueueCreateFlagBits::DisplayPlaneAlphaFlagBitsKHR::ExternalFenceFeatureFlagBits::ExternalFenceHandleTypeFlagBits::ExternalMemoryFeatureFlagBits::ExternalMemoryFeatureFlagBitsNV::ExternalMemoryHandleTypeFlagBits::ExternalMemoryHandleTypeFlagBitsNV::ExternalSemaphoreFeatureFlagBits::ExternalSemaphoreHandleTypeFlagBits::FenceCreateFlagBits::FenceImportFlagBits::FormatFeatureFlagBits::FramebufferCreateFlagBits::GeometryFlagBitsNV::GeometryInstanceFlagBitsNV::ImageAspectFlagBits::ImageCreateFlagBits::ImageUsageFlagBits::ImageViewCreateFlagBits::IndirectCommandsLayoutUsageFlagBitsNVX::MemoryAllocateFlagBits::MemoryHeapFlagBits::layout::BindSparseInfo
 waitSemaphoreCount	include/thirdparty/vulkan/vulkan.hpp	/^      uint32_t waitSemaphoreCount;$/;"	m	struct:VULKAN_HPP_NAMESPACE::AccelerationStructureMemoryRequirementsTypeNV::AccelerationStructureTypeNV::AttachmentLoadOp::AttachmentStoreOp::BlendFactor::BlendOp::BlendOverlapEXT::BorderColor::ChromaLocation::CoarseSampleOrderTypeNV::ColorSpaceKHR::CommandBufferLevel::CompareOp::ComponentSwizzle::ComponentTypeNV::ConservativeRasterizationModeEXT::CopyAccelerationStructureModeNV::CoverageModulationModeNV::CoverageReductionModeNV::DebugReportObjectTypeEXT::DescriptorType::DescriptorUpdateTemplateType::DeviceEventTypeEXT::DiscardRectangleModeEXT::DisplayEventTypeEXT::DisplayPowerStateEXT::DriverIdKHR::DynamicState::Filter::Format::FrontFace::FullScreenExclusiveEXT::GeometryTypeNV::ImageLayout::ImageTiling::ImageType::ImageViewType::IndexType::IndirectCommandsTokenTypeNVX::InternalAllocationType::LineRasterizationModeEXT::LogicOp::MemoryOverallocationBehaviorAMD::ObjectEntryTypeNVX::ObjectType::PerformanceConfigurationTypeINTEL::PerformanceOverrideTypeINTEL::PerformanceParameterTypeINTEL::PerformanceValueTypeINTEL::PhysicalDeviceType::PipelineBindPoint::PipelineCacheHeaderVersion::PipelineExecutableStatisticFormatKHR::PointClippingBehavior::PolygonMode::PresentModeKHR::PrimitiveTopology::QueryPoolSamplingModeINTEL::QueryType::QueueGlobalPriorityEXT::RasterizationOrderAMD::RayTracingShaderGroupTypeNV::Result::SamplerAddressMode::SamplerMipmapMode::SamplerReductionModeEXT::layout::DeviceGroupSubmitInfo
 waitSemaphoreCount	include/thirdparty/vulkan/vulkan_core.h	/^    uint32_t                                    waitSemaphoreCount;$/;"	m	struct:VkBindSparseInfo
@@ -17304,8 +17301,6 @@ zout_start	include/thirdparty/stb_image.h	/^   char *zout_start;$/;"	m	struct:__
 ~Attachment	src/core/render/attachment.cpp	/^Attachment::~Attachment()$/;"	f	class:sword::render::Attachment
 ~Buffer	src/core/render/resource.cpp	/^Buffer::~Buffer()$/;"	f	class:sword::render::Buffer
 ~Camera	src/old/occupant.cpp	/^Camera::~Camera()$/;"	f	class:Camera
-~CommandBuffer	src/core/render/command.cpp	/^CommandBuffer::~CommandBuffer()$/;"	f	class:sword::render::CommandBuffer
-~CommandPool	src/core/render/command.cpp	/^CommandPool::~CommandPool()$/;"	f	class:sword::render::CommandPool
 ~CompilationResult	include/thirdparty/shaderc/shaderc.hpp	/^  ~CompilationResult() { shaderc_result_release(compilation_result_); }$/;"	f	class:shaderc::CompilationResult
 ~CompileOptions	include/thirdparty/shaderc/shaderc.hpp	/^  ~CompileOptions() { shaderc_compile_options_release(options_); }$/;"	f	class:shaderc::CompileOptions
 ~Compiler	include/thirdparty/shaderc/shaderc.hpp	/^  ~Compiler() { shaderc_compiler_release(compiler_); }$/;"	f	class:shaderc::Compiler
