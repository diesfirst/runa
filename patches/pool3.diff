diff --git a/src/core/types/pool.hpp b/src/core/types/pool.hpp
index 5bc3bd0..51951a3 100644
--- a/src/core/types/pool.hpp
+++ b/src/core/types/pool.hpp
@@ -6,61 +6,44 @@
 #include <functional>
 #include <vector>
 #include <iostream>
-#include <render/context.hpp>
-#include <render/command.hpp>
-#include <command/command.hpp>
-#include <type_traits>
 
 namespace sword
 {
 
 namespace state { class Report; }
-namespace render { class Context; class CommandPool; }
 
-template <typename T, typename Base, size_t Size>
+template <typename T, typename Base, size_t Size = 3>
 class Pool
 {
 private:
-    std::unique_ptr<render::CommandPool> gpuCommandPool;
     std::array<T, Size> pool;
-
+    static constexpr size_t size = Size;
 public:
-    //using Pointer = std::unique_ptr<Base, std::function<void(Base*)>>;
-    using Pointer = std::unique_ptr<Base, std::function<void(Base*)>>;
 
     Pool() {}
-    Pool(render::CommandPool&& gpuPool) 
-    {
-        gpuCommandPool = std::make_unique<render::CommandPool>(std::forward<render::CommandPool>(gpuPool));
-        {
-            for (auto& element : pool) 
-            {
-                auto& buffer = gpuCommandPool->requestCommandBuffer(vk::CommandBufferLevel::ePrimary);
-                //element.setCommandBuffer(buffer);
-            }
-        }
-    }
 
-    template <typename... Args> 
-    Pointer request(Args... args)
+    using Pointer = std::unique_ptr<Base, std::function<void(Base*)>>;
+
+    template <typename... Args> Pointer
+    request(Args... args)
     {
         std::cout << "Called first pool" << '\n';
-        for (int i = 0; i < Size; i++) 
+        for (int i = 0; i < size; i++) 
             if (pool[i].isAvailable())
             {
                 pool[i].set(args...);
                 pool[i].activate();
-                Pointer ptr{&pool[i], [](Base* t){ t->reset(); }}; //may not have to construct here
+                Pointer ptr{&pool[i], [](Base* t){ t->reset(); }};
                 return ptr; //tentatively may need to be std::move? copy should be ellided tho
             }    
         return nullptr;
     }
 
     template <typename... Args> 
-    Pointer request(std::function<void(state::Report*)> reportCb, Args... args) //requires IsCommand<T>
+    Pointer request(std::function<void(state::Report*)> reportCb, Args... args)
     {
         std::cout << "Called second pool request" << std::endl;
-        for (int i = 0; i < Size; i++) 
+        for (int i = 0; i < size; i++) 
             if (pool[i].isAvailable())
             {
                 pool[i].setSuccessFn(reportCb);
@@ -78,6 +61,14 @@ public:
             i.print();
     }
 
+private:
+
+//    template <typename... Args> void initialize(Args&&... args)
+//    {
+//        for (int i = 0; i < size; i++) 
+//            pool.emplace_back(args...);   
+//    }
+
 };
 
 
