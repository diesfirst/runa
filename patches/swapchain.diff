diff --git a/src/core/render/swapchain.cpp b/src/core/render/swapchain.cpp
index 8f1120d..6a0fd6d 100644
--- a/src/core/render/swapchain.cpp
+++ b/src/core/render/swapchain.cpp
@@ -28,12 +28,12 @@ Swapchain::Swapchain(const Context& context, const Window& window, const uint8_t
 	createImageViews();
 }
 
-Swapchain::~Swapchain()
-{	
-	destroyImageViews();
-	context.getDevice().destroySwapchainKHR(swapchain);
-	context.getInstance().destroySurfaceKHR(surface);
-}
+//Swapchain::~Swapchain()
+//{	
+//	destroyImageViews();
+//	context.getDevice().destroySwapchainKHR(swapchain);
+//	context.getInstance().destroySurfaceKHR(surface);
+//}
 
 void Swapchain::createSurface()
 {
@@ -111,7 +111,7 @@ void Swapchain::createSwapchain()
 	createInfo.setCompositeAlpha(vk::CompositeAlphaFlagBitsKHR::eOpaque);
 	//means we dont care about the color of obscured pixels
 	createInfo.setClipped(true); 
-	swapchain = context.getDevice().createSwapchainKHR(createInfo);
+	swapchain = context.getDevice().createSwapchainKHRUnique(createInfo);
 	std::cout << "Swapchain created!" << std::endl;
 	swapchainCreated = true;
 }
@@ -143,12 +143,8 @@ vk::ImageUsageFlags Swapchain::getUsageFlags()
 
 void Swapchain::setImages()
 {
-	if (!swapchainCreated) {
-		std::cout << "Attempted to get images"
-		       << " from nonexistant swapchain"
-	       	       << std::endl;
-	}
-	images = context.getDevice().getSwapchainImagesKHR(swapchain);
+    assert(swapchain);
+	images = context.getDevice().getSwapchainImagesKHR(*swapchain);
 }
 
 void Swapchain::createImageViews()
@@ -166,7 +162,7 @@ void Swapchain::createImageViews()
 
 	for (const auto image : images) {
 		createInfo.setImage(image);
-		imageViews.push_back(context.getDevice().createImageView(createInfo));
+		imageViews.push_back(context.getDevice().createImageViewUnique(createInfo));
 	}
 }
 
@@ -182,13 +178,13 @@ uint8_t Swapchain::getImageCount() const
 
 const vk::SwapchainKHR& Swapchain::getHandle() const
 {
-	return swapchain;
+	return *swapchain;
 }
 
 uint32_t Swapchain::acquireNextImage(vk::Semaphore semaphore, vk::Fence fence)
 {
 	auto result = context.getDevice().acquireNextImageKHR(
-			swapchain,
+			*swapchain,
 			UINT64_MAX, //so it will wait forever
 			//will be signalled when we can do something with this
 			semaphore, 
@@ -202,16 +198,6 @@ uint32_t Swapchain::acquireNextImage(vk::Semaphore semaphore, vk::Fence fence)
 	return result.value;
 }
 
-
-void Swapchain::destroyImageViews()
-{
-	for (auto imageView : imageViews) 
-	{
-		context.getDevice().destroyImageView(imageView);
-	}
-}
-
-
 }; // namespace render
 
 }; // namespace sword
diff --git a/src/core/render/swapchain.hpp b/src/core/render/swapchain.hpp
index 81a836a..f66557f 100644
--- a/src/core/render/swapchain.hpp
+++ b/src/core/render/swapchain.hpp
@@ -17,35 +17,20 @@ class Swapchain
 {
 public:
 	Swapchain (const Context& context, const Window& window, const uint8_t swapImageCount);
-
-	friend class Viewport;
-
-	virtual ~Swapchain();
+	~Swapchain() = default;
 
 	void checkPresentModes();
-
 	void checkFormatsAvailable();
-
 	void createSwapchain();
-
 	std::vector<vk::Image>& getImages();
-
 	vk::Extent2D getExtent2D();
-
 	vk::Extent3D getExtent3D();
-
 	vk::Format getFormat();
-
 	vk::ImageUsageFlags getUsageFlags();
-
 	std::tuple<uint32_t, vk::Semaphore*> acquireNextImageNoFence();
-
 	uint32_t acquireNextImage(vk::Semaphore, vk::Fence);
-
 	uint8_t getCurrentIndex() const;
-
 	uint8_t getImageCount() const;
-
 	const vk::SwapchainKHR& getHandle() const;
 
 private:
@@ -54,8 +39,8 @@ private:
 	const Window& window;
 	const Context& context;
 	std::vector<vk::Image> images;
-	std::vector<vk::ImageView> imageViews;
-	vk::SwapchainKHR swapchain;
+	std::vector<vk::UniqueImageView> imageViews;
+	vk::UniqueSwapchainKHR swapchain;
 	vk::SurfaceCapabilitiesKHR surfCaps;
 	vk::SurfaceKHR surface;
 	vk::Extent2D extent;
@@ -65,30 +50,16 @@ private:
 	uint8_t imageCount;
 
 	bool swapchainCreated = false;
-
 	void initSyncObjects();
-
 	void setImageCount(const uint32_t count = 3);
-
 	void setQueueFamilyIndex();
-	
 	void createSurface();
-
 	void setSurfaceCapabilities();
-	
 	void setSwapExtent();
-
 	void setFormat();
-
 	void setImages();
-
 	void setPresentMode();
-
 	void createImageViews();
-
-	void destroyImageViews();
-
-	void destroySyncObjects();
 };
 
 }; // namespace render
