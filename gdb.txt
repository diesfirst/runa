Currently logging to "gdb.txt".
Logs will be appended to the log file.
Output will be logged and displayed.
$10 = std::unordered_map with 3 elements = {["pipe2"] = {attachmentStates = std::vector of length 1, capacity 1 = {{blendEnable = 1, srcColorBlendFactor = vk::BlendFactor::eSrcAlpha, dstColorBlendFactor = vk::BlendFactor::eDstAlpha, [m
        [mcolorBlendOp = vk::BlendOp::eSrcOverEXT, srcAlphaBlendFactor = vk::BlendFactor::eOne, dstAlphaBlendFactor = vk::BlendFactor::eOne, alphaBlendOp = vk::BlendOp::eSrcOverEXT, colorWriteMask = {m_mask = 15}}}, [m
    [mrasterizationState = {<vk::layout::PipelineRasterizationStateCreateInfo> = {sType = vk::StructureType::ePipelineRasterizationStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthClampEnable = 0, rasterizerDiscardEnable = 0, [m
        [mpolygonMode = vk::PolygonMode::eFillRectangleNV, cullMode = {m_mask = 2}, frontFace = vk::FrontFace::eClockwise, depthBiasEnable = 0, depthBiasConstantFactor = 0, depthBiasClamp = 0, depthBiasSlopeFactor = 0, lineWidth = 1}, <No data fields>}, [m
    [mname = "pipe2", handle = {static objectType = vk::ObjectType::ePipeline, m_pipeline = [34m0x3b000000003b[m}, device = @0x7fffffffa050, renderPass = @0x5555567ff078, layout = {static objectType = vk::ObjectType::ePipelineLayout, m_pipelineLayout = [34m0x240000000024[m}, [m
    [mrenderArea = {offset = {x = 300, y = 300}, extent = {width = 200, height = 200}}, shaderStageInfos = std::vector of length 2, capacity 2 = {{<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, [m
          [mpNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eVertex, module = {static objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x70000000007[m}, pName = [34m0x555555b13e2c[m "main", [m
          [mpSpecializationInfo = [34m0x5555566c9de8[m}, <No data fields>}, {<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eFragment, [m
          [mmodule = {static objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x3a000000003a[m}, pName = [34m0x555555b13e2c[m "main", pSpecializationInfo = [34m0x55555687ea28[m}, <No data fields>}}, viewportState = {<vk::layout::PipelineViewportStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineViewportStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, viewportCount = 1, pViewports = [34m0x7fffffff9db8[m, scissorCount = 1, pScissors = [34m0x7fffffff9dd0[m}, <No data fields>}, [m
    [mmultisampleState = {<vk::layout::PipelineMultisampleStateCreateInfo> = {sType = vk::StructureType::ePipelineMultisampleStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, rasterizationSamples = vk::SampleCountFlagBits::e1, sampleShadingEnable = 0, [m
        [mminSampleShading = 1, pSampleMask = [34m0x0[m, alphaToCoverageEnable = 0, alphaToOneEnable = 0}, <No data fields>}, colorBlendState = {<vk::layout::PipelineColorBlendStateCreateInfo> = {sType = vk::StructureType::ePipelineColorBlendStateCreateInfo, [m
        [mpNext = [34m0x0[m, flags = {m_mask = 0}, logicOpEnable = 0, logicOp = vk::LogicOp::eCopy, attachmentCount = 1, pAttachments = [34m0x555556873600[m, blendConstants = {0, 0, 0, 0}}, <No data fields>}, [m
    [mdepthStencilState = {<vk::layout::PipelineDepthStencilStateCreateInfo> = {sType = vk::StructureType::ePipelineDepthStencilStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthTestEnable = 0, depthWriteEnable = 0, depthCompareOp = vk::CompareOp::eNever, [m
        [mdepthBoundsTestEnable = 0, stencilTestEnable = 0, front = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, back = {[m
          [mfailOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, minDepthBounds = 0, maxDepthBounds = 0}, <No data fields>}, [m
    [minputAssemblySate = {<vk::layout::PipelineInputAssemblyStateCreateInfo> = {sType = vk::StructureType::ePipelineInputAssemblyStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, topology = vk::PrimitiveTopology::eTriangleList, [m
        [mprimitiveRestartEnable = 0}, <No data fields>}, vertexInputState = {<vk::layout::PipelineVertexInputStateCreateInfo> = {sType = vk::StructureType::ePipelineVertexInputStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, vertexBindingDescriptionCount = 0, [m
        [mpVertexBindingDescriptions = [34m0x0[m, vertexAttributeDescriptionCount = 0, pVertexAttributeDescriptions = [34m0x0[m}, <No data fields>}, shaders = std::vector of length 2, capacity 2 = {[34m0x5555566c9d88[m, [34m0x55555687e9c8[m}, viewport = {x = 300, y = 300, width = 200, [m
      [mheight = 200, minDepth = 0, maxDepth = 1}, scissor = {offset = {x = 300, y = 300}, extent = {width = 200, height = 200}}, subpassIndex = 0, created = true}, ["pipe"] = {attachmentStates = std::vector of length 1, capacity 1 = {{blendEnable = 1, [m
        [msrcColorBlendFactor = vk::BlendFactor::eSrcAlpha, dstColorBlendFactor = vk::BlendFactor::eDstAlpha, colorBlendOp = vk::BlendOp::eSrcOverEXT, srcAlphaBlendFactor = vk::BlendFactor::eOne, dstAlphaBlendFactor = vk::BlendFactor::eOne, [m
        [malphaBlendOp = vk::BlendOp::eSrcOverEXT, colorWriteMask = {m_mask = 15}}}, rasterizationState = {<vk::layout::PipelineRasterizationStateCreateInfo> = {sType = vk::StructureType::ePipelineRasterizationStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, [m
        [mdepthClampEnable = 0, rasterizerDiscardEnable = 0, polygonMode = vk::PolygonMode::eFillRectangleNV, cullMode = {m_mask = 2}, frontFace = vk::FrontFace::eClockwise, depthBiasEnable = 0, depthBiasConstantFactor = 0, depthBiasClamp = 0, [m
        [mdepthBiasSlopeFactor = 0, lineWidth = 1}, <No data fields>}, name = "pipe", handle = {static objectType = vk::ObjectType::ePipeline, m_pipeline = [34m0x250000000025[m}, device = @0x7fffffffa050, renderPass = @0x5555567ff078, layout = {[m
      [mstatic objectType = vk::ObjectType::ePipelineLayout, m_pipelineLayout = [34m0x240000000024[m}, renderArea = {offset = {x = 0, y = 0}, extent = {width = 500, height = 500}}, shaderStageInfos = std::vector of length 2, capacity 2 = {[m
      [m{<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eVertex, module = {static objectType = vk::ObjectType::eShaderModule, [m
            [mm_shaderModule = [34m0x70000000007[m}, pName = [34m0x555555b13e2c[m "main", pSpecializationInfo = [34m0x5555566c9de8[m}, <No data fields>}, {<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, [m
          [mflags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eFragment, module = {static objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x60000000006[m}, pName = [34m0x555555b13e2c[m "main", pSpecializationInfo = [34m0x5555563166d8[m}, <No data fields>}}, [m
    [mviewportState = {<vk::layout::PipelineViewportStateCreateInfo> = {sType = vk::StructureType::ePipelineViewportStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, viewportCount = 1, pViewports = [34m0x7fffffff9db8[m, scissorCount = 1, [m
        [mpScissors = [34m0x7fffffff9dd0[m}, <No data fields>}, multisampleState = {<vk::layout::PipelineMultisampleStateCreateInfo> = {sType = vk::StructureType::ePipelineMultisampleStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, [m
        [mrasterizationSamples = vk::SampleCountFlagBits::e1, sampleShadingEnable = 0, minSampleShading = 1, pSampleMask = [34m0x0[m, alphaToCoverageEnable = 0, alphaToOneEnable = 0}, <No data fields>}, [m
    [mcolorBlendState = {<vk::layout::PipelineColorBlendStateCreateInfo> = {sType = vk::StructureType::ePipelineColorBlendStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, logicOpEnable = 0, logicOp = vk::LogicOp::eCopy, attachmentCount = 1, [m
        [mpAttachments = [34m0x5555567fd840[m, blendConstants = {0, 0, 0, 0}}, <No data fields>}, depthStencilState = {<vk::layout::PipelineDepthStencilStateCreateInfo> = {sType = vk::StructureType::ePipelineDepthStencilStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, depthTestEnable = 0, depthWriteEnable = 0, depthCompareOp = vk::CompareOp::eNever, depthBoundsTestEnable = 0, stencilTestEnable = 0, front = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, [m
          [mdepthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, back = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, [m
          [mcompareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, minDepthBounds = 0, maxDepthBounds = 0}, <No data fields>}, inputAssemblySate = {<vk::layout::PipelineInputAssemblyStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineInputAssemblyStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, topology = vk::PrimitiveTopology::eTriangleList, primitiveRestartEnable = 0}, <No data fields>}, [m
    [mvertexInputState = {<vk::layout::PipelineVertexInputStateCreateInfo> = {sType = vk::StructureType::ePipelineVertexInputStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, vertexBindingDescriptionCount = 0, pVertexBindingDescriptions = [34m0x0[m, [m
        [mvertexAttributeDescriptionCount = 0, pVertexAttributeDescriptions = [34m0x0[m}, <No data fields>}, shaders = std::vector of length 2, capacity 2 = {[34m0x5555566c9d88[m, [34m0x555556316678[m}, viewport = {x = 0, y = 0, width = 500, height = 500, minDepth = 0, [m
      [mmaxDepth = 1}, scissor = {offset = {x = 0, y = 0}, extent = {width = 500, height = 500}}, subpassIndex = 0, created = true}, ["red_pipe"] = {attachmentStates = std::vector of length 1, capacity 1 = {{blendEnable = 1, [m
        [msrcColorBlendFactor = vk::BlendFactor::eSrcAlpha, dstColorBlendFactor = vk::BlendFactor::eDstAlpha, colorBlendOp = vk::BlendOp::eSrcOverEXT, srcAlphaBlendFactor = vk::BlendFactor::eOne, dstAlphaBlendFactor = vk::BlendFactor::eOne, [m
        [malphaBlendOp = vk::BlendOp::eSrcOverEXT, colorWriteMask = {m_mask = 15}}}, rasterizationState = {<vk::layout::PipelineRasterizationStateCreateInfo> = {sType = vk::StructureType::ePipelineRasterizationStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, [m
        [mdepthClampEnable = 0, rasterizerDiscardEnable = 0, polygonMode = vk::PolygonMode::eFillRectangleNV, cullMode = {m_mask = 2}, frontFace = vk::FrontFace::eClockwise, depthBiasEnable = 0, depthBiasConstantFactor = 0, depthBiasClamp = 0, [m
        [mdepthBiasSlopeFactor = 0, lineWidth = 1}, <No data fields>}, name = "red_pipe", handle = {static objectType = vk::ObjectType::ePipeline, m_pipeline = [34m0x300000000030[m}, device = @0x7fffffffa050, renderPass = @0x5555567ff078, layout = {[m
      [mstatic objectType = vk::ObjectType::ePipelineLayout, m_pipelineLayout = [34m0x240000000024[m}, renderArea = {offset = {x = 0, y = 0}, extent = {width = 200, height = 200}}, shaderStageInfos = std::vector of length 2, capacity 2 = {[m
      [m{<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eVertex, module = {static objectType = vk::ObjectType::eShaderModule, [m
            [mm_shaderModule = [34m0x70000000007[m}, pName = [34m0x555555b13e2c[m "main", pSpecializationInfo = [34m0x5555566c9de8[m}, <No data fields>}, {<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, [m
          [mflags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eFragment, module = {static objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x2f000000002f[m}, pName = [34m0x555555b13e2c[m "main", pSpecializationInfo = [34m0x55555687ea28[m}, <No data fields>}}, [m
    [mviewportState = {<vk::layout::PipelineViewportStateCreateInfo> = {sType = vk::StructureType::ePipelineViewportStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, viewportCount = 1, pViewports = [34m0x7fffffff9db8[m, scissorCount = 1, [m
        [mpScissors = [34m0x7fffffff9dd0[m}, <No data fields>}, multisampleState = {<vk::layout::PipelineMultisampleStateCreateInfo> = {sType = vk::StructureType::ePipelineMultisampleStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, [m
        [mrasterizationSamples = vk::SampleCountFlagBits::e1, sampleShadingEnable = 0, minSampleShading = 1, pSampleMask = [34m0x0[m, alphaToCoverageEnable = 0, alphaToOneEnable = 0}, <No data fields>}, [m
    [mcolorBlendState = {<vk::layout::PipelineColorBlendStateCreateInfo> = {sType = vk::StructureType::ePipelineColorBlendStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, logicOpEnable = 0, logicOp = vk::LogicOp::eCopy, attachmentCount = 1, [m
        [mpAttachments = [34m0x55555687fbe0[m, blendConstants = {0, 0, 0, 0}}, <No data fields>}, depthStencilState = {<vk::layout::PipelineDepthStencilStateCreateInfo> = {sType = vk::StructureType::ePipelineDepthStencilStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, depthTestEnable = 0, depthWriteEnable = 0, depthCompareOp = vk::CompareOp::eNever, depthBoundsTestEnable = 0, stencilTestEnable = 0, front = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, [m
          [mdepthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, back = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, [m
          [mcompareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, minDepthBounds = 0, maxDepthBounds = 0}, <No data fields>}, inputAssemblySate = {<vk::layout::PipelineInputAssemblyStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineInputAssemblyStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, topology = vk::PrimitiveTopology::eTriangleList, primitiveRestartEnable = 0}, <No data fields>}, [m
    [mvertexInputState = {<vk::layout::PipelineVertexInputStateCreateInfo> = {sType = vk::StructureType::ePipelineVertexInputStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, vertexBindingDescriptionCount = 0, pVertexBindingDescriptions = [34m0x0[m, [m
        [mvertexAttributeDescriptionCount = 0, pVertexAttributeDescriptions = [34m0x0[m}, <No data fields>}, shaders = std::vector of length 2, capacity 2 = {[34m0x5555566c9d88[m, [34m0x55555687e9c8[m}, viewport = {x = 0, y = 0, width = 200, height = 200, minDepth = 0, [m
      [mmaxDepth = 1}, scissor = {offset = {x = 0, y = 0}, extent = {width = 200, height = 200}}, subpassIndex = 0, created = true}}
Currently logging to "gdb.txt".
Logs will be appended to the log file.
Output will be logged and displayed.
$11 = std::unordered_map with 3 elements = {["pipe2"] = {attachmentStates = std::vector of length 1, capacity 1 = {{blendEnable = 1, [m
        [msrcColorBlendFactor = vk::BlendFactor::eSrcAlpha, dstColorBlendFactor = vk::BlendFactor::eDstAlpha, colorBlendOp = vk::BlendOp::eSrcOverEXT, [m
        [msrcAlphaBlendFactor = vk::BlendFactor::eOne, dstAlphaBlendFactor = vk::BlendFactor::eOne, alphaBlendOp = vk::BlendOp::eSrcOverEXT, colorWriteMask = {[m
          [mm_mask = 15}}}, rasterizationState = {<vk::layout::PipelineRasterizationStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineRasterizationStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthClampEnable = 0, rasterizerDiscardEnable = 0, [m
        [mpolygonMode = vk::PolygonMode::eFillRectangleNV, cullMode = {m_mask = 2}, frontFace = vk::FrontFace::eClockwise, depthBiasEnable = 0, [m
        [mdepthBiasConstantFactor = 0, depthBiasClamp = 0, depthBiasSlopeFactor = 0, lineWidth = 1}, <No data fields>}, name = "pipe2", handle = {[m
      [mstatic objectType = vk::ObjectType::ePipeline, m_pipeline = [34m0x3b000000003b[m}, device = @0x7fffffffa050, renderPass = @0x5555567ff078, layout = {[m
      [mstatic objectType = vk::ObjectType::ePipelineLayout, m_pipelineLayout = [34m0x240000000024[m}, renderArea = {offset = {x = 300, y = 300}, extent = {width = 200, [m
        [mheight = 200}}, shaderStageInfos = std::vector of length 2, capacity 2 = {{<vk::layout::PipelineShaderStageCreateInfo> = {[m
          [msType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eVertex, module = {[m
            [mstatic objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x70000000007[m}, pName = [34m0x555555b13e2c[m "main", [m
          [mpSpecializationInfo = [34m0x5555566c9de8[m}, <No data fields>}, {<vk::layout::PipelineShaderStageCreateInfo> = {[m
          [msType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eFragment, module = {[m
            [mstatic objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x3a000000003a[m}, pName = [34m0x555555b13e2c[m "main", [m
          [mpSpecializationInfo = [34m0x55555687ea28[m}, <No data fields>}}, viewportState = {<vk::layout::PipelineViewportStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineViewportStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, viewportCount = 1, pViewports = [34m0x7fffffff9db8[m, [m
        [mscissorCount = 1, pScissors = [34m0x7fffffff9dd0[m}, <No data fields>}, multisampleState = {<vk::layout::PipelineMultisampleStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineMultisampleStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, rasterizationSamples = vk::SampleCountFlagBits::e1, [m
        [msampleShadingEnable = 0, minSampleShading = 1, pSampleMask = [34m0x0[m, alphaToCoverageEnable = 0, alphaToOneEnable = 0}, <No data fields>}, [m
    [mcolorBlendState = {<vk::layout::PipelineColorBlendStateCreateInfo> = {sType = vk::StructureType::ePipelineColorBlendStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, logicOpEnable = 0, logicOp = vk::LogicOp::eCopy, attachmentCount = 1, pAttachments = [34m0x555556873600[m, blendConstants = {0, 0, 0, [m
          [m0}}, <No data fields>}, depthStencilState = {<vk::layout::PipelineDepthStencilStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineDepthStencilStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthTestEnable = 0, depthWriteEnable = 0, [m
        [mdepthCompareOp = vk::CompareOp::eNever, depthBoundsTestEnable = 0, stencilTestEnable = 0, front = {failOp = vk::StencilOp::eKeep, [m
          [mpassOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, [m
        [mback = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, [m
          [mcompareMask = 0, writeMask = 0, reference = 0}, minDepthBounds = 0, maxDepthBounds = 0}, <No data fields>}, [m
    [minputAssemblySate = {<vk::layout::PipelineInputAssemblyStateCreateInfo> = {sType = vk::StructureType::ePipelineInputAssemblyStateCreateInfo, pNext = [34m0x0[m, [m
        [mflags = {m_mask = 0}, topology = vk::PrimitiveTopology::eTriangleList, primitiveRestartEnable = 0}, <No data fields>}, [m
    [mvertexInputState = {<vk::layout::PipelineVertexInputStateCreateInfo> = {sType = vk::StructureType::ePipelineVertexInputStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, vertexBindingDescriptionCount = 0, pVertexBindingDescriptions = [34m0x0[m, vertexAttributeDescriptionCount = 0, [m
        [mpVertexAttributeDescriptions = [34m0x0[m}, <No data fields>}, shaders = std::vector of length 2, capacity 2 = {[34m0x5555566c9d88[m, [34m0x55555687e9c8[m}, viewport = {[m
      [mx = 300, y = 300, width = 200, height = 200, minDepth = 0, maxDepth = 1}, scissor = {offset = {x = 300, y = 300}, extent = {width = 200, height = 200}}, [m
    [msubpassIndex = 0, created = true}, ["pipe"] = {attachmentStates = std::vector of length 1, capacity 1 = {{blendEnable = 1, [m
        [msrcColorBlendFactor = vk::BlendFactor::eSrcAlpha, dstColorBlendFactor = vk::BlendFactor::eDstAlpha, colorBlendOp = vk::BlendOp::eSrcOverEXT, [m
        [msrcAlphaBlendFactor = vk::BlendFactor::eOne, dstAlphaBlendFactor = vk::BlendFactor::eOne, alphaBlendOp = vk::BlendOp::eSrcOverEXT, colorWriteMask = {[m
          [mm_mask = 15}}}, rasterizationState = {<vk::layout::PipelineRasterizationStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineRasterizationStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthClampEnable = 0, rasterizerDiscardEnable = 0, [m
        [mpolygonMode = vk::PolygonMode::eFillRectangleNV, cullMode = {m_mask = 2}, frontFace = vk::FrontFace::eClockwise, depthBiasEnable = 0, [m
        [mdepthBiasConstantFactor = 0, depthBiasClamp = 0, depthBiasSlopeFactor = 0, lineWidth = 1}, <No data fields>}, name = "pipe", handle = {[m
      [mstatic objectType = vk::ObjectType::ePipeline, m_pipeline = [34m0x250000000025[m}, device = @0x7fffffffa050, renderPass = @0x5555567ff078, layout = {[m
      [mstatic objectType = vk::ObjectType::ePipelineLayout, m_pipelineLayout = [34m0x240000000024[m}, renderArea = {offset = {x = 0, y = 0}, extent = {width = 500, [m
        [mheight = 500}}, shaderStageInfos = std::vector of length 2, capacity 2 = {{<vk::layout::PipelineShaderStageCreateInfo> = {[m
          [msType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eVertex, module = {[m
[m            [mstatic objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x70000000007[m}, pName = [34m0x555555b13e2c[m "main", [m
          [mpSpecializationInfo = [34m0x5555566c9de8[m}, <No data fields>}, {<vk::layout::PipelineShaderStageCreateInfo> = {[m
          [msType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eFragment, module = {[m
            [mstatic objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x60000000006[m}, pName = [34m0x555555b13e2c[m "main", [m
          [mpSpecializationInfo = [34m0x5555563166d8[m}, <No data fields>}}, viewportState = {<vk::layout::PipelineViewportStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineViewportStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, viewportCount = 1, pViewports = [34m0x7fffffff9db8[m, [m
        [mscissorCount = 1, pScissors = [34m0x7fffffff9dd0[m}, <No data fields>}, multisampleState = {<vk::layout::PipelineMultisampleStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineMultisampleStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, rasterizationSamples = vk::SampleCountFlagBits::e1, [m
        [msampleShadingEnable = 0, minSampleShading = 1, pSampleMask = [34m0x0[m, alphaToCoverageEnable = 0, alphaToOneEnable = 0}, <No data fields>}, [m
    [mcolorBlendState = {<vk::layout::PipelineColorBlendStateCreateInfo> = {sType = vk::StructureType::ePipelineColorBlendStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, logicOpEnable = 0, logicOp = vk::LogicOp::eCopy, attachmentCount = 1, pAttachments = [34m0x5555567fd840[m, blendConstants = {0, 0, 0, [m
          [m0}}, <No data fields>}, depthStencilState = {<vk::layout::PipelineDepthStencilStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineDepthStencilStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthTestEnable = 0, depthWriteEnable = 0, [m
        [mdepthCompareOp = vk::CompareOp::eNever, depthBoundsTestEnable = 0, stencilTestEnable = 0, front = {failOp = vk::StencilOp::eKeep, [m
          [mpassOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, [m
        [mback = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, [m
          [mcompareMask = 0, writeMask = 0, reference = 0}, minDepthBounds = 0, maxDepthBounds = 0}, <No data fields>}, [m
    [minputAssemblySate = {<vk::layout::PipelineInputAssemblyStateCreateInfo> = {sType = vk::StructureType::ePipelineInputAssemblyStateCreateInfo, pNext = [34m0x0[m, [m
        [mflags = {m_mask = 0}, topology = vk::PrimitiveTopology::eTriangleList, primitiveRestartEnable = 0}, <No data fields>}, [m
    [mvertexInputState = {<vk::layout::PipelineVertexInputStateCreateInfo> = {sType = vk::StructureType::ePipelineVertexInputStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, vertexBindingDescriptionCount = 0, pVertexBindingDescriptions = [34m0x0[m, vertexAttributeDescriptionCount = 0, [m
        [mpVertexAttributeDescriptions = [34m0x0[m}, <No data fields>}, shaders = std::vector of length 2, capacity 2 = {[34m0x5555566c9d88[m, [34m0x555556316678[m}, viewport = {x = 0, [m
      [my = 0, width = 500, height = 500, minDepth = 0, maxDepth = 1}, scissor = {offset = {x = 0, y = 0}, extent = {width = 500, height = 500}}, subpassIndex = 0, [m
    [mcreated = true}, ["red_pipe"] = {attachmentStates = std::vector of length 1, capacity 1 = {{blendEnable = 1, srcColorBlendFactor = vk::BlendFactor::eSrcAlpha, [m
        [mdstColorBlendFactor = vk::BlendFactor::eDstAlpha, colorBlendOp = vk::BlendOp::eSrcOverEXT, srcAlphaBlendFactor = vk::BlendFactor::eOne, [m
        [mdstAlphaBlendFactor = vk::BlendFactor::eOne, alphaBlendOp = vk::BlendOp::eSrcOverEXT, colorWriteMask = {m_mask = 15}}}, [m
    [mrasterizationState = {<vk::layout::PipelineRasterizationStateCreateInfo> = {sType = vk::StructureType::ePipelineRasterizationStateCreateInfo, pNext = [34m0x0[m, [m
        [mflags = {m_mask = 0}, depthClampEnable = 0, rasterizerDiscardEnable = 0, polygonMode = vk::PolygonMode::eFillRectangleNV, cullMode = {m_mask = 2}, [m
        [mfrontFace = vk::FrontFace::eClockwise, depthBiasEnable = 0, depthBiasConstantFactor = 0, depthBiasClamp = 0, depthBiasSlopeFactor = 0, [m
        [mlineWidth = 1}, <No data fields>}, name = "red_pipe", handle = {static objectType = vk::ObjectType::ePipeline, m_pipeline = [34m0x300000000030[m}, [m
    [mdevice = @0x7fffffffa050, renderPass = @0x5555567ff078, layout = {static objectType = vk::ObjectType::ePipelineLayout, m_pipelineLayout = [34m0x240000000024[m}, [m
    [mrenderArea = {offset = {x = 0, y = 0}, extent = {width = 200, height = 200}}, shaderStageInfos = std::vector of length 2, capacity 2 = {[m
      [m{<vk::layout::PipelineShaderStageCreateInfo> = {sType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, [m
          [mstage = vk::ShaderStageFlagBits::eVertex, module = {static objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x70000000007[m}, [m
          [mpName = [34m0x555555b13e2c[m "main", pSpecializationInfo = [34m0x5555566c9de8[m}, <No data fields>}, {<vk::layout::PipelineShaderStageCreateInfo> = {[m
          [msType = vk::StructureType::ePipelineShaderStageCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, stage = vk::ShaderStageFlagBits::eFragment, module = {[m
            [mstatic objectType = vk::ObjectType::eShaderModule, m_shaderModule = [34m0x2f000000002f[m}, pName = [34m0x555555b13e2c[m "main", [m
          [mpSpecializationInfo = [34m0x55555687ea28[m}, <No data fields>}}, viewportState = {<vk::layout::PipelineViewportStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineViewportStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, viewportCount = 1, pViewports = [34m0x7fffffff9db8[m, [m
        [mscissorCount = 1, pScissors = [34m0x7fffffff9dd0[m}, <No data fields>}, multisampleState = {<vk::layout::PipelineMultisampleStateCreateInfo> = {[m
        [msType = vk::StructureType::ePipelineMultisampleStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, rasterizationSamples = vk::SampleCountFlagBits::e1, [m
        [msampleShadingEnable = 0, minSampleShading = 1, pSampleMask = [34m0x0[m, alphaToCoverageEnable = 0, alphaToOneEnable = 0}, <No data fields>}, [m
    [mcolorBlendState = {<vk::layout::PipelineColorBlendStateCreateInfo> = {sType = vk::StructureType::ePipelineColorBlendStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, logicOpEnable = 0, logicOp = vk::LogicOp::eCopy, attachmentCount = 1, pAttachments = [34m0x55555687fbe0[m, blendConstants = {0, 0, 0, [m
          [m0}}, <No data fields>}, depthStencilState = {<vk::layout::PipelineDepthStencilStateCreateInfo> = {[m
[m        [msType = vk::StructureType::ePipelineDepthStencilStateCreateInfo, pNext = [34m0x0[m, flags = {m_mask = 0}, depthTestEnable = 0, depthWriteEnable = 0, [m
        [mdepthCompareOp = vk::CompareOp::eNever, depthBoundsTestEnable = 0, stencilTestEnable = 0, front = {failOp = vk::StencilOp::eKeep, [m
          [mpassOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, compareMask = 0, writeMask = 0, reference = 0}, [m
        [mback = {failOp = vk::StencilOp::eKeep, passOp = vk::StencilOp::eKeep, depthFailOp = vk::StencilOp::eKeep, compareOp = vk::CompareOp::eNever, [m
          [mcompareMask = 0, writeMask = 0, reference = 0}, minDepthBounds = 0, maxDepthBounds = 0}, <No data fields>}, [m
    [minputAssemblySate = {<vk::layout::PipelineInputAssemblyStateCreateInfo> = {sType = vk::StructureType::ePipelineInputAssemblyStateCreateInfo, pNext = [34m0x0[m, [m
        [mflags = {m_mask = 0}, topology = vk::PrimitiveTopology::eTriangleList, primitiveRestartEnable = 0}, <No data fields>}, [m
    [mvertexInputState = {<vk::layout::PipelineVertexInputStateCreateInfo> = {sType = vk::StructureType::ePipelineVertexInputStateCreateInfo, pNext = [34m0x0[m, flags = {[m
          [mm_mask = 0}, vertexBindingDescriptionCount = 0, pVertexBindingDescriptions = [34m0x0[m, vertexAttributeDescriptionCount = 0, [m
        [mpVertexAttributeDescriptions = [34m0x0[m}, <No data fields>}, shaders = std::vector of length 2, capacity 2 = {[34m0x5555566c9d88[m, [34m0x55555687e9c8[m}, viewport = {x = 0, [m
      [my = 0, width = 200, height = 200, minDepth = 0, maxDepth = 1}, scissor = {offset = {x = 0, y = 0}, extent = {width = 200, height = 200}}, subpassIndex = 0, [m
    [mcreated = true}}
Invalid cast.
Invalid cast.
Invalid cast.
Invalid cast.
Invalid cast.
Invalid cast.
Invalid cast.
Invalid cast.
314	        std::cerr << "Renderer::recreateGraphicsPipeline: Graphics pipeline by that name does not exist." << '\n';
$12 = "red_pipe"
